import { Injectable } from '@angular/core';



export interface ReportState {
  pageSize: number;
  searchValue: string;
  showVulnerableOnly: boolean;
  selectedVuln?: string; // Add this to store the selected CVE ID
}

@Injectable({
  providedIn: 'root'
})


export class VulnerabilityService {

  private lastShowedCpeResult: any | null = null; 
  private lastShowedSearchType: string | null = null;
  private selectedVulnerabilityIndex: number = 0;
  private VulnerabilityIndexForCveCpe: number = 0;
  private selectedVulnerabilitySeverity: string | null = null;
  private cveCpeSearchState: any = null;
  private selectedVulnerabilityIndexForCve: number = 0;

private reportState: ReportState | null = null;

setReportState(state: ReportState): void {
  this.reportState = state;
}

getReportState(): ReportState | null {
  return this.reportState;
}

clearReportState(): void {
  this.reportState = null;
}


  setLastShowedCpeResult(cpe: any | null): void {
    console.log('Setting last showed CPE result:', cpe);
    this.lastShowedCpeResult = cpe;
    console.log('Last showed CPE result set to:', this.lastShowedCpeResult);
  }

  getLastShowedCpeResult(): any | null {
    return this.lastShowedCpeResult;
  }

  setLastShowedSearchType(variant: string | null): void {
    this.lastShowedSearchType = variant;
  }

  getLastShowedSearchType(): string | null {
    return this.lastShowedSearchType;
  }

  setSelectedVulnerabilityIndex(index: number) {
    this.selectedVulnerabilityIndex = index;
  }
  getSelectedVulnerabilityIndex(): number {
    return this.selectedVulnerabilityIndex;
  }
  setSelectedVulnerabilityIndexForCve(index: number) {
    this.selectedVulnerabilityIndexForCve = index;
  }
  getSelectedVulnerabilityIndexForCve(): number {
    return this.selectedVulnerabilityIndexForCve;
  }
  setVulnerabilityIndexForCveCpe(index: number) {
    this.VulnerabilityIndexForCveCpe = index;
  }
  getVulnerabilityIndexForCveCpe(): number {
    return this.VulnerabilityIndexForCveCpe;
  }
  
  setSelectedVulnerabilitySeverity(severity: string | null) {
    this.selectedVulnerabilitySeverity = severity;
  }

  getSelectedVulnerabilitySeverity(): string | null {
    return this.selectedVulnerabilitySeverity;
  }

  setCveCpeSearchState(state: any): void {
    this.cveCpeSearchState = state;
  }
  
  getCveCpeSearchState(): any {
    return this.cveCpeSearchState;
  }
  
  clearCveCpeSearchState(): void {
    this.cveCpeSearchState = null;
  }

    resetCveCpeSearchState(): void {
  this.cveCpeSearchState = null;
}
}