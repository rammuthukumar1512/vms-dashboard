import {Component,OnInit,OnDestroy,ViewChildren, QueryList,ElementRef,} from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatSelectModule } from '@angular/material/select';
import { MatInputModule } from '@angular/material/input';
import { MatButtonModule } from '@angular/material/button';
import { MatTableModule } from '@angular/material/table';
import { MatDialogModule, MatDialog,MatDialogRef} from '@angular/material/dialog';
import { MatIconModule } from '@angular/material/icon';
import { FormsModule } from '@angular/forms';
import { HttpClient } from '@angular/common/http';
import { Subject, takeUntil } from 'rxjs';
import { ApiEndPoints } from '../../environments/api-endpoints';
import { ToastService } from '../core/services/toast.service';
import { CveResult, CpeResult, CvssMetric } from '../models/computer.model';
import { CpeVulnerabilityDialogComponent } from './cpe-vulnerability-dialog.component';
import { MatTooltipModule } from '@angular/material/tooltip';
import { Router } from '@angular/router';
import { ApplicationResolveService } from '../core/services/application-resolve.service';
import { AppRoutes } from '../../environments/approutes';
import { ChangeDetectorRef } from '@angular/core';
import { VulnerabilityService } from '../core/services/vulnerabilityService';
import { LoaderService } from '../core/services/loader.service';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';

@Component({
  selector: 'app-cpe-cve-search',
  standalone: true,
  imports: [
    CommonModule,
    MatFormFieldModule,
    MatSelectModule,
    MatInputModule,
    MatButtonModule,
    MatTableModule,
    MatDialogModule,
    MatIconModule,
    FormsModule,
    MatTooltipModule,
    MatProgressSpinnerModule,
  ],
  templateUrl: './cpe-cve-search.component.html',
  styleUrls: ['./cpe-cve-search.component.css'],
})
export class CpeCveSearchComponent implements OnInit, OnDestroy {
  searchType: 'cve' | 'cpe' = 'cve';
  searchVariant: string = 'Select Variant';
  searchQuery: string = '';
  placeholder: string = 'Enter search query';
  cveResults: CveResult[] = [];
  cpeResults: CpeResult[] = [];
  sortedResults: CveResult[]=[];
  searchPerformed: boolean = false;
  pagedCveResults: CveResult[] = [];
  pagedCpeResults: CpeResult[] = [];
  cveDisplayedColumns: string[] = [
    'cveId',
    'description',
    'cvssVersion',
    'severity',
    'cvssScore',
  ];
  cpeDisplayedColumns: string[] = ['cpeName'];
  pageIndex = 0;
  pageSize = 5;
  pageSizes: number[] = [5, 10, 25, 50, 100];
  cveTotalPages = 0;
  cpeTotalPages = 0;
  cveTotalRecords: number[] = [];
  cpeTotalRecords: number[] = [];
  cveIdSortState: number = 0;   
  start = 0;
  end = 0;
  recordIndex = 1;
  sortState: number = 0;
  selectedCveId: string | null = null;
  selectedCpeName: string | null = null;
  dialogRef!: MatDialogRef<any>;
  cpeCveSortState: number = 0;

  private cpePattern = /^cpe:2\.3:[aho](:[^:]*){0,10}$/;
  private strictCpePattern =
    /^cpe:2.3:[aho]:(?![\*\-])([^:\s]+):(?![\*\-])([^:\s]+):(([^:\s\*]+)|-):(([^:\s]+|\*)(?<!^-):){6}([^:\s]+|\*)(?<!^-)$/;
  private destroy$ = new Subject<void>();

  cveIdPart: string = '';
  cpePart: string = 'a';
  cpeVendor: string = '';
  cpeProduct: string = '';
  cpeVersion: string = '';
  isEditingCpe: boolean = true;
  constructedCpe: string = '';
  isLoadingCpe: boolean = false;
  isSearching: boolean = false;
  @ViewChildren('vulnerabilityRows', { read: ElementRef })
  vulnerabilityRows!: QueryList<ElementRef>;

  constructor(
    private http: HttpClient,
    private dialog: MatDialog,
    private toastService: ToastService,
    private applicationResolveService: ApplicationResolveService,
    private router: Router,
    private cdRef: ChangeDetectorRef,
    private vulnerabilityService: VulnerabilityService,
    private loaderService: LoaderService
  ) {}

  ngOnInit(): void {
    const previousUrl = this.applicationResolveService.getPreviousUrl();
    if (previousUrl && previousUrl.search('vulnerability-metrics') !== -1) {
      const previousSearchType =
        this.vulnerabilityService.getLastShowedSearchType();
      if (previousSearchType === 'cpe') {
        this.loaderService.show();
        this.cpeResults = this.vulnerabilityService.getLastShowedCpeResult();
        if (this.cpeResults.length) {
          this.updateCpePagedData(0);
        }
      }
      this.applicationResolveService.setPreviousUrl(this.router.url);
      const state = this.vulnerabilityService.getCveCpeSearchState();
      console.log(state,'state init')
      if (state) {
        setTimeout(() => this.restoreState(state));
      }
    }
  }

  isPartedVariant(): boolean {
    return this.searchVariant === 'CVE-ID' || this.searchVariant === 'CPE Name';
  }

  getSearchVariants(): string[] {
    return this.searchType === 'cve'
      ? ['Select Variant', 'Keyword', 'CVE-ID', 'CPE Name']
      : ['Select Variant', 'Keyword', 'Likely CPE Name'];
  }

  onSearchTypeChange(): void {
    this.searchVariant = 'Select Variant';
    this.searchQuery = '';
    this.updatePlaceholderAndQuery();
    this.clearResults();
  }

  onSearchVariantChange(): void {
    this.searchQuery = '';
    this.updatePlaceholderAndQuery();
    this.clearResults();
  }

  updatePlaceholderAndQuery(): void {
    // this.searchQuery = '';
    if (this.searchVariant === 'CVE-ID') {
      this.cveIdPart = '';
      this.placeholder = 'Enter YYYY-NNNN (e.g., 2024-123456)';
    } else if (this.searchVariant === 'CPE Name') {
      this.cpePart = 'a';
      this.cpeVendor = '';
      this.cpeProduct = '';
      this.cpeVersion = '';
      this.placeholder =
        'Enter CPE components (e.g., microsoft:edge:138.0.3351.77)';
    } else if (this.searchVariant === 'Keyword') {
      this.placeholder = 'Enter the keyword';
    } else if (this.searchVariant === 'Likely CPE Name') {
      this.searchQuery = 'cpe:2.3:';
      this.placeholder =
        'Enter likely CPE name (e.g., cpe:2.3:a:microsoft:edge:138.0.3351.77:*:*:*:*:*:*:*)';
    } else {
      this.placeholder = 'Enter search query';
    }
  }

  clearResults(): void {
    this.cveResults = [];
    this.pagedCveResults = [];
    this.pagedCpeResults = [];
    this.pageIndex = 0;
    this.recordIndex = 1;
    this.cveTotalPages = 0;
    this.cpeTotalPages = 0;
    this.cveTotalRecords = [];
    this.cpeTotalRecords = [];
    this.searchPerformed = false;
    this.cveIdPart = '';
    this.cpePart = 'a';
    this.cpeVendor = '';
    this.cpeProduct = '';
    this.cpeVersion = '';
    this.isEditingCpe = true;
    this.constructedCpe = '';
  }

  validateInput(): boolean {
    if (this.searchVariant === 'Select Variant') {
      this.toastService.showErrorToast(
        'Please select a valid search variant before searching.'
      );
      return false;
    }

    let query: string = '';

    switch (this.searchVariant) {
      case 'Keyword':
        query = this.searchQuery?.trim() || '';
        if (!query) {
          this.toastService.showErrorToast('Please enter a valid keyword.');
          return false;
        }
        if (query.length < 3) {
          this.toastService.showErrorToast(
            'Keyword search requires at least 3 characters.'
          );
          return false;
        }
        break;
      case 'CVE-ID':
        query = this.cveIdPart?.trim() || '';
        if (!query) {
          this.toastService.showErrorToast(
            'CVE-ID cannot be empty. Please enter a valid CVE-ID.'
          );
          return false;
        }
        if (!/^\d{4}-\d{4,}$/.test(query)) {
          this.toastService.showErrorToast(
            'Invalid CVE-ID format. It should be in the format YYYY-NNNN (e.g., 1234-123456).'
          );
          return false;
        }
        break;
      case 'CPE Name':
        if (
          !this.cpePart ||
          !this.cpeVendor.trim() ||
          !this.cpeProduct.trim() ||
          !this.cpeVersion.trim()
        ) {
          this.toastService.showErrorToast(
            'All fields (vendor, product, version) must be filled. Please complete all fields.'
          );
          return false;
        }
        query = `cpe:2.3:${this.cpePart}:${this.cpeVendor}:${this.cpeProduct}:${this.cpeVersion}:*:*:*:*:*:*:*`;
        if (!this.strictCpePattern.test(query)) {
          this.toastService.showErrorToast('Invalid CPE Name format.');
          return false;
        }
        break;
      case 'Likely CPE Name':
        query = this.searchQuery?.trim() || '';
        if (!query) {
          this.toastService.showErrorToast(
            'Likely CPE Name cannot be empty. Please enter a valid format.'
          );
          return false;
        }
        if (!this.cpePattern.test(query)) {
          this.toastService.showErrorToast('Invalid CPE Name format.');
          return false;
        }
        break;
    }

    return true;
  }

  search(): void {
    if (this.isSearching) {
      return;
    }
    this.isSearching = true;

    this.pageIndex = 0;
    this.recordIndex = 1;
    this.pageSize = 5;
    this.sortState = 0;
    this.cveIdSortState = 0;
    this.selectedCpeName = null;
    this.vulnerabilityService.setLastShowedSearchType(this.searchType);
    this.cpeCveSortState = 0;
    if (!this.validateInput()) {
      this.isSearching = false;
      return;
    }

    const params: any = {};
    if (this.searchVariant === 'Keyword') {
      params.searchKeyword = this.searchQuery;
    } else if (this.searchVariant === 'CVE-ID') {
      params.searchCveId = `CVE-${this.cveIdPart}`;
    } else if (
      this.searchVariant === 'CPE Name' ||
      this.searchVariant === 'Likely CPE Name'
    ) {
      params.searchCpeName =
        this.searchVariant === 'CPE Name'
          ? `cpe:2.3:${this.cpePart}:${this.cpeVendor}:${this.cpeProduct}:${this.cpeVersion}:*:*:*:*:*:*:*`
          : this.searchQuery;
    }
    //backend call
    this.http
      .get<any>(`${ApiEndPoints.searchVulnerabilityUrl}/${this.searchType}`, {
        params,
      })
      .subscribe({
        next: (data) => {
          if (this.searchType === 'cve') {
            this.cveResults = (data || []).map((item: any) => ({
              cveId: item.cveId,
              cveDescription: item.cveDescription,
              cvssMetrics: item.cvssMetrics
                ? item.cvssMetrics.sort(
                    (a: CvssMetric, b: CvssMetric) =>
                      parseFloat(b.version) - parseFloat(a.version)
                  )
                : [],
              affectedProducts: item.affectedProducts || [],
            }));
            this.updateCvePagedData(0);
            this.searchPerformed = true;
            setTimeout(() => {
            const selectedVulnerabilityIndex = 0;
            const selectedRow = Array.from(this.vulnerabilityRows)[
              selectedVulnerabilityIndex
            ]?.nativeElement;
            selectedRow?.scrollIntoView({ behaviour: 'smooth', block: 'center' });
          }, 0);
            this.toastService.showSuccessToast('Search Completed Successfully');
          } else {
            this.cpeResults = (data || []).map((item: any) => ({
              cpe23Uri: item.cpe23Uri,
              vendor: item.vendor,
              product: item.product,
              version: item.version,
            }));
            this.vulnerabilityService.setLastShowedCpeResult(this.cpeResults);
            this.updateCpePagedData(0);
            this.searchPerformed = true;
            this.toastService.showSuccessToast('Search Completed Successfully');
            this.selectedCveId = null;
          }
          if (this.searchVariant === 'CPE Name') {
            this.constructedCpe = `cpe:2.3:${this.cpePart}:${this.cpeVendor}:${this.cpeProduct}:${this.cpeVersion}:*:*:*:*:*:*:*`;
            this.isEditingCpe = false;
          }
          this.isSearching = false;
        },
        error: (_error) => {
          this.toastService.showErrorToast(
            `Failed to search ${this.searchType.toUpperCase()} data.`
          );
          if (this.searchType === 'cve') {
            this.searchQuery = '';
            this.cveResults = [];
            this.pagedCveResults = [];
            this.cveTotalPages = 0;
            this.cveTotalRecords = [];
          } else {
            this.searchQuery = '';
            this.cpeResults = [];
            this.pagedCpeResults = [];
            this.cpeTotalPages = 0;
            this.cpeTotalRecords = [];
            this.searchPerformed = false;
            this.isSearching = false;
          }
        },
      });
  }
clearCpeInputs(): void {
  this.cpeVendor = '';
  this.cpeProduct = '';
  this.cpeVersion = '';
  this.constructedCpe = '';
  this.isEditingCpe = true; // show editable fields again
  // this.toastService.showSuccessToast('CPE fields cleared.');
}

  editCpe(): void {
  if (this.constructedCpe && this.constructedCpe.startsWith('cpe:2.3:')) {
    const parts = this.constructedCpe.split(':');
    // Structure: cpe:2.3:<part>:<vendor>:<product>:<version>:*:*:*:*:*:*:*
    this.cpePart = parts[2] || 'a';
    this.cpeVendor = parts[3] || '';
    this.cpeProduct = parts[4] || '';
    this.cpeVersion = parts[5] || '';
  }
    this.isEditingCpe = true;
  }

  openCpeVulnerabilities(
    cpe: CpeResult,
    preFetchedVulnerabilities?: CveResult[],
    selectedCveId?: string
  ): void {
    this.selectedCpeName = cpe.cpe23Uri;
    console.log(this.searchQuery,'srhqry')
    const state = {
      searchType: this.searchType,
      searchVariant: this.searchVariant,
      searchQuery: this.searchQuery,
      cveIdPart: this.cveIdPart,
      cpePart: this.cpePart,
      cpeVendor: this.cpeVendor,
      cpeProduct: this.cpeProduct,
      cpeVersion: this.cpeVersion,
      isEditingCpe: this.isEditingCpe,
      constructedCpe: this.constructedCpe,
      searchPerformed: this.searchPerformed,
      pageIndex: this.pageIndex,
      pageSize: this.pageSize,
      recordIndex: this.recordIndex,
      sortState: this.sortState,
      sortStateInDialog: this.sortState,
      selectedCveId: this.selectedCveId,
      selectedCveIdInDialog: selectedCveId,
      selectedCpeName: this.selectedCpeName,
      fromDialog: true,
      cveResults: this.cveResults,
      cpeResults: this.cpeResults
    };
    this.vulnerabilityService.setCveCpeSearchState(state);
    if (preFetchedVulnerabilities) {
      this.dialogRef = this.dialog.open(CpeVulnerabilityDialogComponent, {
        width: '1000px',
        data: {
          cpeName: cpe.cpe23Uri,
          vulnerabilities: preFetchedVulnerabilities
        },
      });
      this.cdRef.detectChanges();
      this.loaderService.hide();
      this.dialogRef.afterClosed().subscribe(() => {
        if (this.router.url == '/cpe-cve-search') {
          this.sortState = 0;
          this.vulnerabilityService.setCveCpeSearchState(null);
        }
      });
      return;
    }

    this.http
      .get<CveResult[]>(`${ApiEndPoints.searchVulnerabilityUrl}/cve`, {
        params: { searchCpeName: cpe.cpe23Uri },
      })
      .subscribe({
        next: (data) => {
          this.toastService.showSuccessToast(
            'Vulnerabilities Fetched Successfully'
          );
          const vulnerabilities = (data || []).map((item: any) => ({
            cveId: item.cveId,
            cveDescription: item.cveDescription,
            cvssMetrics: item.cvssMetrics
              ? item.cvssMetrics.sort(
                  (a: CvssMetric, b: CvssMetric) =>
                    parseFloat(b.version) - parseFloat(a.version)
                )
              : [],
            affectedProducts: item.affectedProducts || [],
          }));
          this.dialogRef = this.dialog.open(CpeVulnerabilityDialogComponent, {
            width: '1000px',
            data: {
              cpeName: cpe.cpe23Uri,
              vulnerabilities,
            },
          });
          this.cdRef.detectChanges();
        },
        error: (_error) => {
          this.toastService.showErrorToast(
            'Unable to retrieve CPE vulnerability data.'
          );
        },
      });
  }

  updateCvePagedData(initialIndex: number): void {
    if (!this.pageSizes.includes(this.pageSize)) {
      this.pageSize = this.pageSizes[0] || 5;
    }

    const totalItems = this.cveResults.length;

    this.pageSizes =
      totalItems >= 100
        ? [5, 10, 25, 50, 100]
        : totalItems >= 50
        ? [5, 10, 25, 50]
        : totalItems >= 25
        ? [5, 10, 25]
        : totalItems >= 10
        ? [5, 10]
        : totalItems > 0
        ? [5]
        : [];

    let sortedResults = [...this.cveResults];

if (this.cveIdSortState === 1) {
  // Ascending: older years first
  sortedResults.sort((a, b) => {
    const yearA = parseInt(a.cveId?.split('-')[1] || '0', 10);
    const yearB = parseInt(b.cveId?.split('-')[1] || '0', 10);
    return yearA - yearB;
  });
} else if (this.cveIdSortState === 2) {
  // Descending: latest years first
  sortedResults.sort((a, b) => {
    const yearA = parseInt(a.cveId?.split('-')[1] || '0', 10);
    const yearB = parseInt(b.cveId?.split('-')[1] || '0', 10);
    return yearB - yearA;
  });
}

// 2️⃣ CVSS Score sort
if (this.sortState === 1) {
  sortedResults.sort(
    (a, b) =>
      (a.cvssMetrics[0]?.baseScore ?? 0) -
      (b.cvssMetrics[0]?.baseScore ?? 0)
  );
} else if (this.sortState === 2) {
  sortedResults.sort(
    (a, b) =>
      (b.cvssMetrics[0]?.baseScore ?? 0) -
      (a.cvssMetrics[0]?.baseScore ?? 0)
  );
    }
    this.cveTotalPages = Math.ceil(totalItems / this.pageSize);
    this.cveTotalRecords = Array.from(
      { length: this.cveTotalPages },
      (_, i) => i + 1
    );
    this.start = initialIndex * this.pageSize;
    this.end = this.start + this.pageSize;
    this.pagedCveResults = sortedResults.slice(this.start, this.end);
  }

  updateCpePagedData(initialIndex: number): void {
    if (!this.pageSizes.includes(this.pageSize)) {
      this.pageSize = this.pageSizes[0] || 5;
    }

    const totalItems = this.cpeResults.length;

    this.pageSizes =
      totalItems >= 100
        ? [5, 10, 25, 50, 100]
        : totalItems >= 50
        ? [5, 10, 25, 50]
        : totalItems >= 25
        ? [5, 10, 25]
        : totalItems >= 10
        ? [5, 10]
        : totalItems > 0
        ? [5]
        : [];

    this.cpeTotalPages = Math.ceil(totalItems / this.pageSize);
    this.cpeTotalRecords = Array.from(
      { length: this.cpeTotalPages },
      (_, i) => i + 1
    );
    this.start = initialIndex * this.pageSize;
    this.end = this.start + this.pageSize;
    this.pagedCpeResults = this.cpeResults.slice(this.start, this.end);
  }

  toggleCvssSort(): void {
    if (this.searchType !== 'cve' || !this.searchPerformed || this.pagedCveResults.length === 0)
    return;

  // Reset CVE-ID sort
  this.cveIdSortState = 0;
  this.recordIndex = 1;
  // Cycle CVSS sort state: 0 -> 1 -> 2 -> 0
  this.sortState = (this.sortState + 1) % 3;
  this.selectedCveId = null;
  this.applicationResolveService.setCpeCveSortState(1);
  this.applicationResolveService.setCpeCveCveIdSortState(this.cveIdSortState);
  this.applicationResolveService.setCpeCveCvssSortState(this.sortState);

  // Update table
  this.updateCvePagedData(this.pageIndex);
  }
  toggleCveIdSort(): void {
  if (this.searchType !== 'cve' || !this.searchPerformed || this.pagedCveResults.length === 0)
    return;

  // Reset CVSS sort
  this.sortState = 0;
  this.recordIndex = 1; 
  // Cycle CVE-ID sort state: 0 -> 1 -> 2 -> 0
  this.cveIdSortState = (this.cveIdSortState + 1) % 3;
  this.selectedCveId = null;
  this.applicationResolveService.setCpeCveSortState(2);
  this.applicationResolveService.setCpeCveCvssSortState(this.sortState);
  this.applicationResolveService.setCpeCveCveIdSortState(this.cveIdSortState);

  // Update table
  this.updateCvePagedData(this.pageIndex);
}

  public showVulnerabilityMetrics(cveId: string, index: number) {
    const state = {
      searchType: this.searchType,
      searchVariant: this.searchVariant,
      searchQuery: this.searchQuery,
      cveIdPart: this.cveIdPart,
      cpePart: this.cpePart,
      cpeVendor: this.cpeVendor,
      cpeProduct: this.cpeProduct,
      cpeVersion: this.cpeVersion,
      isEditingCpe: this.isEditingCpe,
      constructedCpe: this.constructedCpe,
      searchPerformed: this.searchPerformed,
      pageIndex: this.pageIndex,
      pageSize: this.pageSize,
      recordIndex: this.recordIndex,
      sortState: this.sortState,
      selectedCveId: cveId,
      fromDialog: false,
      cveResults: this.searchType === 'cve' ? this.cveResults : undefined,
      cpeResults: this.searchType === 'cpe' ? this.cpeResults : undefined,
    };
    this.vulnerabilityService.setCveCpeSearchState(state);
    this.vulnerabilityService.setSelectedVulnerabilityIndexForCve(index);
    this.applicationResolveService.setPreviousUrl(this.router.url);
    
    sessionStorage.setItem('previousUrl', this.router.url);
    this.router.navigate([`${AppRoutes.vulnerability_metrics}cve/${cveId}`]);
  }

  nextPage(tab: 'cve' | 'cpe'): void {
    if (tab === 'cve' && this.pageIndex < this.cveTotalPages - 1) {
      this.pageIndex++;
      this.recordIndex = this.pageIndex + 1;
      this.updateCvePagedData(this.pageIndex);
    } else if (tab === 'cpe' && this.pageIndex < this.cpeTotalPages - 1) {
      this.pageIndex++;
      this.recordIndex = this.pageIndex + 1;
      this.updateCpePagedData(this.pageIndex);
    }
  }

  previousPage(tab: 'cve' | 'cpe'): void {
    if (this.pageIndex > 0) {
      this.pageIndex--;
      this.recordIndex = this.pageIndex + 1;
      tab === 'cve'
        ? this.updateCvePagedData(this.pageIndex)
        : this.updateCpePagedData(this.pageIndex);
    }
  }

  getPage(page: number, tab: 'cve' | 'cpe'): void {
    this.pageIndex = page - 1;
    this.recordIndex = page;
    tab === 'cve'
      ? this.updateCvePagedData(this.pageIndex)
      : this.updateCpePagedData(this.pageIndex);
  }

  onScroll(event: Event): void {
    const element = event.target as HTMLElement;
    if (element.scrollHeight - element.scrollTop === element.clientHeight) {
      element.classList.add('scrolled-to-end');
    } else {
      element.classList.remove('scrolled-to-end');
    }
  }

  onPageSizeChange(event: number, tab: 'cve' | 'cpe'): void {
    this.pageSize = event;
    this.pageIndex = 0;
    this.recordIndex = 1;
    tab === 'cve'
      ? this.updateCvePagedData(this.pageIndex)
      : this.updateCpePagedData(this.pageIndex);
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  private restoreState(state: any): void {
    this.searchType = state.searchType || 'cve';
    this.searchVariant = state.searchVariant || 'Select Variant';
    this.searchQuery = state.searchQuery || '';
    this.cveIdPart = state.cveIdPart || '';
    this.cpePart = state.cpePart || 'a';
    this.cpeVendor = state.cpeVendor || '';
    this.cpeProduct = state.cpeProduct || '';
    this.cpeVersion = state.cpeVersion || '';
    this.constructedCpe = state.constructedCpe || '';
    this.searchPerformed = true;
    this.pageIndex = state.pageIndex || 0;
    this.pageSize = state.pageSize || 5;
    this.recordIndex = state.recordIndex || 1;
    this.sortState = state.sortStateInDialog || 0;
    // this.selectedCveId = state.selectedCveIdInDialog || null;
    this.selectedCveId = state.fromDialog ? state.selectedCveIdInDialog || null : state.selectedCveId || null;
    this.selectedCpeName = state.selectedCpeName || null;

if (this.searchVariant === 'CPE Name') {
  // ✅ Restore all previously typed values
  this.cpePart = state.cpePart || 'a';
  this.cpeVendor = state.cpeVendor || '';
  this.cpeProduct = state.cpeProduct || '';
  this.cpeVersion = state.cpeVersion || '';
  this.constructedCpe = state.constructedCpe || '';
  this.isEditingCpe = state.isEditingCpe ?? false; // if it was showing the constructedCpe, keep it
    setTimeout(() => {
      this.cpePart = state.cpePart || 'a';
      this.cpeVendor = state.cpeVendor || '';
      this.cpeProduct = state.cpeProduct || '';
      this.cpeVersion = state.cpeVersion || '';
    });
} else {
  // ✅ Clear only when not CPE Name variant
  this.isEditingCpe = state.isEditingCpe || false;
  this.cpePart = 'a';
  this.cpeVendor = '';
  this.cpeProduct = '';
  this.cpeVersion = '';
  this.constructedCpe = '';
}

    if (this.searchType === 'cve') {
      this.cveResults = state.cveResults || [];
      this.cpeCveSortState = this.applicationResolveService.getCpeCveSortState();
      console.log(this.cpeCveSortState,'cpecvesrt')
      if(this.cpeCveSortState) {
          this.cveIdSortState = this.applicationResolveService.getCpeCveCveIdSortState();
          console.log(this.cveIdSortState,'cvecpeinside')
          this.sortState = this.applicationResolveService.getCpeCveCvssSortState();
      }
      this.updateCvePagedData(this.pageIndex);
      setTimeout(() => {
        const selectedVulnerabilityIndex =
          this.vulnerabilityService.getSelectedVulnerabilityIndexForCve();
        const selectedRow = Array.from(this.vulnerabilityRows)[
          selectedVulnerabilityIndex
        ]?.nativeElement;
        selectedRow?.scrollIntoView({ behaviour: 'smooth', block: 'center' });
      }, 0);
    } else {
      const serviceCpeResults =
        this.vulnerabilityService.getLastShowedCpeResult();
      this.cpeResults =
        serviceCpeResults && serviceCpeResults.length > 0
          ? serviceCpeResults
          : state.cpeResults || [];
      if (this.selectedCpeName && this.cpeResults.length > 0) {
        const index = this.cpeResults.findIndex(
          (c) => c.cpe23Uri === this.selectedCpeName
        );
        if (index !== -1) {
          this.pageIndex = Math.floor(index / this.pageSize);
          this.recordIndex = this.pageIndex + 1;
        }
      }
      this.updateCpePagedData(this.pageIndex);
    }
    this.cdRef.detectChanges();

    if (state.fromDialog && state.selectedCpe && state.vulnerabilities) {
      setTimeout(() => {
        this.openCpeVulnerabilities(state.selectedCpe, state.vulnerabilities, state.selectedCveIdInDialog);
        this.cdRef.detectChanges();
      }, 0);
    }

    if (this.searchType === 'cpe' && this.selectedCpeName) {
      setTimeout(() => {
        const highlightedRow = document.querySelector(`tr.highlight`);
        if (highlightedRow) {
          highlightedRow.scrollIntoView({
            behavior: 'smooth',
            block: 'center',
          });
        }
      }, 0);
    }

    setTimeout(() => {
      this.searchPerformed = true;
      this.cdRef.detectChanges();
    }, 0);
    if (!this.searchQuery) {
      this.updatePlaceholderAndQuery();
    }
    this.cdRef.detectChanges();
  }
}
