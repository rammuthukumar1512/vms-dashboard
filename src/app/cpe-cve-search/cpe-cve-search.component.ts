import { Component, OnInit, OnDestroy, Inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatSelectModule } from '@angular/material/select';
import { MatInputModule } from '@angular/material/input';
import { MatButtonModule } from '@angular/material/button';
import { MatTableModule } from '@angular/material/table';
import { MatDialogModule, MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import { MatIconModule } from '@angular/material/icon';
import { FormsModule } from '@angular/forms';
import { HttpClient } from '@angular/common/http';
import { MatSnackBar } from '@angular/material/snack-bar';
import { Subject, takeUntil } from 'rxjs';
import { environments } from '../../environments/environments';

interface CvssMetric {
  version: string;
  baseSeverity: string;
  baseScore: number;
}

interface CveResult {
  cveId: string;
  cveDescription: string;
  cvssMetrics: CvssMetric[];
  affectedProducts: { cpeName: string }[];
}

interface CpeResult {
  cpeName: string;
  vulnerabilities: CveResult[];
}

@Component({
  selector: 'app-cpe-vulnerability-dialog',
  template: `
    <mat-dialog-content class="dialog-scroll">
      <h2 class="m-0 p-2">Vulnerabilities for CPE: {{ data.cpeName }}</h2>
      <ng-container *ngIf="data.vulnerabilities.length; else noVulnerabilities">
        <table mat-table [dataSource]="data.vulnerabilities" class="comp-table">
          <ng-container matColumnDef="cveId">
            <th mat-header-cell *matHeaderCellDef>CVE ID</th>
            <td mat-cell *matCellDef="let vuln">{{ vuln.cveId }}</td>
          </ng-container>
          <ng-container matColumnDef="description">
            <th mat-header-cell *matHeaderCellDef>Description</th>
            <td mat-cell *matCellDef="let vuln">{{ vuln.cveDescription }}</td>
          </ng-container>
          <ng-container matColumnDef="severity">
            <th class="text-center" mat-header-cell *matHeaderCellDef>Severity</th>
            <td class="text-center" mat-cell *matCellDef="let vuln">
              <span [ngClass]="{
                'severity-critical': vuln.cvssMetrics[0]?.baseSeverity.toLowerCase() === 'critical',
                'severity-high': vuln.cvssMetrics[0]?.baseSeverity.toLowerCase() === 'high',
                'severity-medium': vuln.cvssMetrics[0]?.baseSeverity.toLowerCase() === 'medium',
                'severity-low': vuln.cvssMetrics[0]?.baseSeverity.toLowerCase() === 'low'
              }">{{ vuln.cvssMetrics[0]?.baseSeverity || 'N/A' }}</span>
            </td>
          </ng-container>
          <ng-container matColumnDef="cvssScore">
            <th class="text-center" mat-header-cell *matHeaderCellDef>CVSS Score</th>
            <td class="text-center" mat-cell *matCellDef="let vuln">{{ vuln.cvssMetrics[0]?.baseScore || 0 }}</td>
          </ng-container>
          <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
          <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>
        </table>
      </ng-container>
      <ng-template #noVulnerabilities>
        <p>No vulnerabilities found</p>
      </ng-template>
    </mat-dialog-content>
    <mat-dialog-actions class="justify-content-end">
      <button mat-button (click)="dialogRef.close()">Close</button>
    </mat-dialog-actions>
  `,
  styles: [`
    .dialog-scroll {
      max-height: 400px;
      overflow-y: auto;
    }
    .comp-table {
      width: 100%;
      table-layout: fixed;
      border-collapse: collapse;
    }
    .comp-table th,
    .comp-table td {
      padding: 8px;
      font-family: Roboto, "Helvetica Neue", sans-serif;
      word-break: break-word;
    }
    .comp-table th {
      background-color: #eaf0f7;
      color: white;
      font-weight: bold;
    }
    .comp-table tbody tr:nth-child(odd) {
      background-color: #f9f9f9;
    }
    .comp-table tr:hover {
      background-color: #f1f1f1;
    }
    .severity-critical { color: #F26419; }
    .severity-high { color: #F6AE2D; }
    .severity-medium { color: #86BBD8; }
    .severity-low { color: #33658A; }
  `],
  standalone: true,
  imports: [CommonModule, MatDialogModule, MatButtonModule, MatTableModule]
})
export class CpeVulnerabilityDialogComponent {
  displayedColumns: string[] = ['cveId', 'description', 'severity', 'cvssScore'];

  constructor(
    public dialogRef: MatDialogRef<CpeVulnerabilityDialogComponent>,
    @Inject(MAT_DIALOG_DATA) public data: { cpeName: string; vulnerabilities: CveResult[] }
  ) {}
}

@Component({
  selector: 'app-cpe-cve-search',
  standalone: true,
  imports: [
    CommonModule,
    MatFormFieldModule,
    MatSelectModule,
    MatInputModule,
    MatButtonModule,
    MatTableModule,
    MatDialogModule,
    MatIconModule,
    FormsModule
  ],
  templateUrl: './cpe-cve-search.component.html',
  styleUrls: ['./cpe-cve-search.component.css']
})
export class CpeCveSearchComponent implements OnInit, OnDestroy {
  searchType: 'cve' | 'cpe' = 'cve';
  searchVariant: string = 'Select Variant';
  searchQuery: string = '';
  placeholder: string = 'Enter search query';
  cveResults: CveResult[] = [];
  cpeResults: CpeResult[] = [];
  pagedCveResults: CveResult[] = [];
  pagedCpeResults: CpeResult[] = [];
  cveDisplayedColumns: string[] = ['cveId', 'description', 'cvssVersion', 'severity', 'cvssScore'];
  cpeDisplayedColumns: string[] = ['cpeName'];
  pageIndex = 0;
  pageSize = 5;
  pageSizes: number[] = [5, 10, 25, 50, 100];
  cveTotalPages = 0;
  cpeTotalPages = 0;
  cveTotalRecords: number[] = [];
  cpeTotalRecords: number[] = [];
  start = 0;
  end = 0;
  recordIndex = 1;
  private cpePattern = /^cpe:2\.3:[aho](:[^:]*){0,10}$/;
  private cveIdPattern = /^CVE-\d{4}-\d{4,}$/;
  private destroy$ = new Subject<void>();

  private calculatePageSizes(totalItems: number): number[] {
  if (totalItems >= 100) return [5, 10, 25, 50, 100];
  if (totalItems >= 50) return [5, 10, 25, 50];
  if (totalItems >= 25) return [5, 10, 25];
  if (totalItems >= 10) return [5, 10];
  if (totalItems > 0) return [5];
  return [];
}

  constructor(
    private http: HttpClient,
    private snackBar: MatSnackBar,
    private dialog: MatDialog
  ) {}

  ngOnInit(): void {}

  getSearchVariants(): string[] {
    return this.searchType === 'cve'
      ? ['Select Variant', 'Keyword', 'CVE-ID', 'CPE Name Search']
      : ['Select Variant', 'Keyword', 'CPE Name'];
  }

  onSearchTypeChange(): void {
    this.searchVariant = 'Select Variant';
    this.updatePlaceholderAndQuery();
    this.clearResults();
  }

  onSearchVariantChange(): void {
    this.updatePlaceholderAndQuery();
    this.clearResults();
  }

  updatePlaceholderAndQuery(): void {
    this.searchQuery = '';
    if (this.searchVariant === 'CVE-ID') {
      this.searchQuery = 'CVE-';
      this.placeholder = 'Enter CVE-ID (e.g., CVE-2023-1234)';
    } else if (this.searchVariant === 'CPE Name' || this.searchVariant === 'CPE Name Search') {
      this.placeholder = 'Kindly enter the valid CPE name (e.g., cpe:2.3:a:vendor:product)';
    } else if (this.searchVariant === 'Keyword') {
      this.placeholder = 'Kindly enter the keyword';
    } else {
      this.placeholder = 'Enter search query';
    }
  }

  clearResults(): void {
    this.cveResults = [];
    this.cpeResults = [];
    this.pagedCveResults = [];
    this.pagedCpeResults = [];
    this.pageIndex = 0;
    this.recordIndex = 1;
    this.cveTotalPages = 0;
    this.cpeTotalPages = 0;
    this.cveTotalRecords = [];
    this.cpeTotalRecords = [];
  }

  search(): void {
    if (!this.searchQuery.trim() || this.searchVariant === 'Select Variant') {
      this.snackBar.open('Please select a valid search variant and enter a query', 'Close', {
        duration: 3000,
        verticalPosition: 'bottom',
        horizontalPosition: 'right'
      });
      return;
    }

    if (this.searchVariant === 'CPE Name' || this.searchVariant === 'CPE Name Search') {
      if (!this.cpePattern.test(this.searchQuery)) {
        this.snackBar.open('Invalid CPE format. Must start with cpe:2.3:[a|o|h]', 'Close', {
          duration: 3000,
          verticalPosition: 'bottom',
          horizontalPosition: 'right'
        });
        return;
      }
    } else if (this.searchVariant === 'CVE-ID' && !this.cveIdPattern.test(this.searchQuery)) {
      this.snackBar.open('Invalid CVE-ID format. Must be CVE-YYYY-NNNN', 'Close', {
        duration: 3000,
        verticalPosition: 'bottom',
        horizontalPosition: 'right'
      });
      return;
    }

    const params: any = {};
    if (this.searchVariant === 'Keyword') {
      params.searchKeyword = this.searchQuery;
    } else if (this.searchVariant === 'CVE-ID') {
      params.searchCveId = this.searchQuery;
    } else if (this.searchVariant === 'CPE Name' || this.searchVariant === 'CPE Name Search') {
      params.searchCpeName = this.searchQuery;
    }

    this.http.get<CveResult[]>(
      `${environments.searchVulnerabilityUrl}/${this.searchType}`,
      { params }
    ).subscribe({
      next: (data) => {
        if (this.searchType === 'cve') {
          this.cveResults = (data || []).map(item => ({
            cveId: item.cveId,
            cveDescription: item.cveDescription,
            cvssMetrics: item.cvssMetrics || [],
            affectedProducts: item.affectedProducts || []
          }));
          this.pageSizes = this.calculatePageSizes(this.cveResults.length);
          if (!this.pageSizes.includes(this.pageSize)) {
          this.pageSize = this.pageSizes[0];
            }

          this.updateCvePagedData(0);
        } else {
          this.cpeResults = (data || []).flatMap(item =>
            (item.affectedProducts || []).map(product => ({
              cpeName: product.cpeName,
              vulnerabilities: [{
                cveId: item.cveId,
                cveDescription: item.cveDescription,
                cvssMetrics: item.cvssMetrics || [],
                affectedProducts: item.affectedProducts
              }]
            }))
          );
          this.pageSizes = this.calculatePageSizes(this.cpeResults.length);
          if (!this.pageSizes.includes(this.pageSize)) {
               this.pageSize = this.pageSizes[0];
              }

          this.updateCpePagedData(0);
        }
      },
      error: (error) => {
        console.error(`Error searching ${this.searchType.toUpperCase()}:`, error);
        this.snackBar.open(`Failed to search ${this.searchType.toUpperCase()}`, 'Close', {
          duration: 5000,
          verticalPosition: 'bottom',
          horizontalPosition: 'right'
        });
      }
    });
  }

  openCpeVulnerabilities(cpe: CpeResult): void {
    this.dialog.open(CpeVulnerabilityDialogComponent, {
      width: '600px',
      data: {
        cpeName: cpe.cpeName,
        vulnerabilities: cpe.vulnerabilities
      }
    });
  }

  updateCvePagedData(initialIndex: number): void {
    const totalItems = this.cveResults.length;
    this.cveTotalPages = Math.ceil(totalItems / this.pageSize);
    this.cveTotalRecords = Array.from({ length: this.cveTotalPages }, (_, i) => i + 1);
    this.start = initialIndex * this.pageSize;
    this.end = this.start + this.pageSize;
    this.pagedCveResults = this.cveResults.slice(this.start, this.end);
  }

  updateCpePagedData(initialIndex: number): void {
    const totalItems = this.cpeResults.length;
    this.cpeTotalPages = Math.ceil(totalItems / this.pageSize);
    this.cpeTotalRecords = Array.from({ length: this.cpeTotalPages }, (_, i) => i + 1);
    this.start = initialIndex * this.pageSize;
    this.end = this.start + this.pageSize;
    this.pagedCpeResults = this.cpeResults.slice(this.start, this.end);
  }

  nextPage(tab: 'cve' | 'cpe'): void {
    if (tab === 'cve' && this.pageIndex < this.cveTotalPages - 1) {
      this.pageIndex++;
      this.recordIndex = this.pageIndex + 1;
      this.updateCvePagedData(this.pageIndex);
    } else if (tab === 'cpe' && this.pageIndex < this.cpeTotalPages - 1) {
      this.pageIndex++;
      this.recordIndex = this.pageIndex + 1;
      this.updateCpePagedData(this.pageIndex);
    }
  }

  previousPage(tab: 'cve' | 'cpe'): void {
    if (this.pageIndex > 0) {
      this.pageIndex--;
      this.recordIndex = this.pageIndex + 1;
      tab === 'cve' ? this.updateCvePagedData(this.pageIndex) : this.updateCpePagedData(this.pageIndex);
    }
  }

  getPage(page: number, tab: 'cve' | 'cpe'): void {
    this.pageIndex = page - 1;
    this.recordIndex = page;
    tab === 'cve' ? this.updateCvePagedData(this.pageIndex) : this.updateCpePagedData(this.pageIndex);
  }

  onPageSizeChange(event: number, tab: 'cve' | 'cpe'): void {
    this.pageSize = event;
    this.pageIndex = 0;
    this.recordIndex = 1;
    tab === 'cve' ? this.updateCvePagedData(this.pageIndex) : this.updateCpePagedData(this.pageIndex);
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }
}