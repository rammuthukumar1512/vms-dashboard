import { Component, OnInit, OnDestroy, Inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatSelectModule } from '@angular/material/select';
import { MatInputModule } from '@angular/material/input';
import { MatButtonModule } from '@angular/material/button';
import { MatTableModule } from '@angular/material/table';
import { MatDialogModule, MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import { MatIconModule } from '@angular/material/icon';
import { FormsModule } from '@angular/forms';
import { HttpClient } from '@angular/common/http';
import { MatSnackBar } from '@angular/material/snack-bar';
import { Subject, takeUntil } from 'rxjs';
import { environments } from '../../environments/environments';
import { ToastService } from '../core/services/toast.service';

interface CvssMetric {
  version: string; 
  baseSeverity: string;
  baseScore: number;
}

interface CveResult {
  cveId: string;
  cveDescription: string;
  cvssMetrics: CvssMetric[];
  affectedProducts: { cpeName: string }[];
}

interface CpeResult {
  cpe23Uri: string;
  vendor: string;
  product: string;
  version: string;
}

@Component({
  selector: 'app-cpe-vulnerability-dialog',
  template: `
    <!-- <mat-dialog-content class="dialog-scroll">
      <div class="d-flex justify-content-between"> 
         <h2 class="m-0 p-2" style="word-break: break-all">Vulnerabilities for CPE: {{ data.cpeName }}</h2>
       <mat-dialog-actions class="justify-content-end mb-5">
      <button mat-button (click)="dialogRef.close()">Close</button>
    </mat-dialog-actions>
     </div>
     
      <ng-container *ngIf="data.vulnerabilities.length; else noVulnerabilities">
        <table mat-table [dataSource]="data.vulnerabilities" class="comp-table">
          <ng-container matColumnDef="cveId">
            <th mat-header-cell *matHeaderCellDef>CVE ID</th>
            <td mat-cell *matCellDef="let vuln">{{ vuln.cveId }}</td>
          </ng-container>
          <ng-container matColumnDef="description">
            <th mat-header-cell *matHeaderCellDef>Description</th>
            <td mat-cell *matCellDef="let vuln">{{ vuln.cveDescription }}</td>
          </ng-container>
          <ng-container matColumnDef="severity">
            <th class="text-center" mat-header-cell *matHeaderCellDef>Severity</th>
            <td class="text-center" mat-cell *matCellDef="let vuln">
              <span [ngClass]="{
                'severity-critical': vuln.cvssMetrics[0]?.baseSeverity.toLowerCase() === 'critical',
                'severity-high': vuln.cvssMetrics[0]?.baseSeverity.toLowerCase() === 'high',
                'severity-medium': vuln.cvssMetrics[0]?.baseSeverity.toLowerCase() === 'medium',
                'severity-low': vuln.cvssMetrics[0]?.baseSeverity.toLowerCase() === 'low'
              }">{{ vuln.cvssMetrics[0]?.baseSeverity || 'N/A' }}</span>
            </td>
          </ng-container>
          <ng-container matColumnDef="cvssScore">
            <th class="text-center" mat-header-cell *matHeaderCellDef>CVSS Score</th>
            <td class="text-center" mat-cell *matCellDef="let vuln">{{ vuln.cvssMetrics[0]?.baseScore || 0 }}</td>
          </ng-container>
          <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
          <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>
        </table>
      </ng-container>
      <ng-template #noVulnerabilities>
        <p class="text-center pt-5">No vulnerabilities found</p>
      </ng-template>
    </mat-dialog-content> -->

     <mat-dialog-content class="dialog-scroll">
      <div class="severity-header">
        <div class="d-flex justify-content-between align-items-center px-1 pt-2 gap-5" style="word-break: break-all">
          <h2 class="m-0 p-2">Vulnerabilities for <span class="vuln-software">"{{ data.cpeName }}"</span></h2>
          
    <mat-dialog-actions class="justify-content-end">
      <button mat-button (click)="dialogRef.close()">Close</button>
    </mat-dialog-actions>
        </div>
      </div>

      <ng-container *ngIf="data.vulnerabilities.length; else noVulnerabilities">
        <div class="table-wrapper">
          <table mat-table [dataSource]="data.vulnerabilities" class="comp-table">
            <ng-container matColumnDef="cveId">
              <th mat-header-cell *matHeaderCellDef>CVE ID</th>
              <td mat-cell *matCellDef="let vuln">{{ vuln.cveId }}</td>
            </ng-container>

            <ng-container matColumnDef="description">
              <th mat-header-cell *matHeaderCellDef>Description</th>
              <td mat-cell *matCellDef="let vuln">{{ vuln.cveDescription }}</td>
            </ng-container>

            <ng-container matColumnDef="severity">
              <th class="text-center" mat-header-cell *matHeaderCellDef>Severity</th>
              <td class="text-center" mat-cell *matCellDef="let vuln">
                <span [ngClass]="{
                  'severity-critical': vuln.cvssMetrics[0]?.baseSeverity.toLowerCase() === 'critical',
                  'severity-high': vuln.cvssMetrics[0]?.baseSeverity.toLowerCase() === 'high',
                  'severity-medium': vuln.cvssMetrics[0]?.baseSeverity.toLowerCase() === 'medium',
                  'severity-low': vuln.cvssMetrics[0]?.baseSeverity.toLowerCase() === 'low'
                }">{{ vuln.cvssMetrics[0]?.baseSeverity || 'N/A' }}</span>
              </td>
            </ng-container>

            <ng-container matColumnDef="cvssScore">
              <th class="text-center" mat-header-cell *matHeaderCellDef>CVSS Score</th>
              <td class="text-center" mat-cell *matCellDef="let vuln">{{ vuln.cvssMetrics[0]?.baseScore || 0 }}</td>
            </ng-container>

            <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
            <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>
          </table>
        </div>
      </ng-container>

      <ng-template #noVulnerabilities>
        <p>No vulnerabilities found</p>
      </ng-template>
    </mat-dialog-content>
   <footer class="p-3"></footer>
  
  `,
  styles: [`
//     .dialog-scroll {
//       max-height: 600px;
//       overflow-y: auto;
//     }
//     .comp-table {
//       width: 100%;
//       table-layout: fixed;
//       border-collapse: collapse;
//     }
//     .comp-table th,
//     .comp-table td {
//       padding: 8px;
//       font-family: Roboto, "Helvetica Neue", sans-serif;
//       word-break: break-word;
//     }
//     .comp-table th {
//       background-color: #007bff;
//       color: white;
//       font-weight: bold;
//     }
//     .comp-table tbody tr:nth-child(odd) {
//       background-color: #f9f9f9;
//     }
//     .comp-table tr:hover {
//       background-color: #f1f1f1;
//     }
//   .severity-critical {
//   background-color: #F26419;
//   color: white;
//   padding: 6px 12px;
//   border-radius: 3px;
// }

// .severity-high {
//   background-color: #F6AE2D;
//   color: black;
//   padding: 6px 12px;
//   border-radius: 3px;
// }

// .severity-medium {
//   background-color: #86BBD8;
//   color: black;
//   padding: 6px 12px;
//   border-radius: 3px;
// }

// .severity-low {
//   background-color: #33658A;
//   color: white;
//   padding: 6px 12px;
//   border-radius: 3px;
// }
.dialog-scroll {
  max-height: 500px;
  overflow-y: hidden;
  min-width: 800px;
  padding: 0 24px;
  display: flex;
  flex-direction: column;
}

.table-wrapper {
  max-height: 450px;
  overflow-y: auto;
  margin-top: 10px;
}

.severity-header {
  position: sticky;
  top: 0;
  z-index: 10;
  background-color: white;
  border-bottom: 1px solid #ccc;
}

.vuln-software {
  color: #F26419;
}

.comp-table {
  width: 100%;
  table-layout: fixed;
  border-collapse: collapse;
}

.comp-table th, .comp-table td {
  padding: 8px;
  font-family: Roboto, "Helvetica Neue", sans-serif;
  word-break: break-word;
}

.comp-table tbody tr:nth-child(odd) {
  background-color: #f9f9f9;
}

.comp-table tr:hover {
  background-color: #f1f1f1;
}

.comp-table th {
  background-color: #d7d7d7ff;
  color: black;
  font-weight: bold;
  position: sticky;
  top: 0;
  z-index: 5;
  text-align: left;
}

/* Severity tags */
.severity-critical {
  background-color: #F26419;
  color: white;
  padding: 6px 12px;
  border-radius: 3px;
}

.severity-high {
  background-color: #F6AE2D;
  color: black;
  padding: 6px 12px;
  border-radius: 3px;
}

.severity-medium {
  background-color: #86BBD8;
  color: black;
  padding: 6px 12px;
  border-radius: 3px;
}

.severity-low {
  background-color: #33658A;
  color: white;
  padding: 6px 12px;
  border-radius: 3px;
}

p {
  text-align: center;
  color: #888;
  padding: 16px;
}

  `],
  standalone: true,
  imports: [CommonModule, MatDialogModule, MatButtonModule, MatTableModule]
})
export class CpeVulnerabilityDialogComponent {
  displayedColumns: string[] = ['cveId', 'description', 'severity', 'cvssScore'];

  constructor(
    public dialogRef: MatDialogRef<CpeVulnerabilityDialogComponent>,
      private toastService: ToastService,
    @Inject(MAT_DIALOG_DATA) public data: { cpeName: string; vulnerabilities: CveResult[] }
  ) {}
}

@Component({
  selector: 'app-cpe-cve-search',
  standalone: true,
  imports: [
    CommonModule,
    MatFormFieldModule,
    MatSelectModule,
    MatInputModule,
    MatButtonModule,
    MatTableModule,
    MatDialogModule,
    MatIconModule,
    FormsModule
  ],
  templateUrl: './cpe-cve-search.component.html',
  styleUrls: ['./cpe-cve-search.component.css']
})
export class CpeCveSearchComponent implements OnInit, OnDestroy {
  searchType: 'cve' | 'cpe' = 'cve';
  searchVariant: string = 'Select Variant';
  searchQuery: string = '';
  placeholder: string = 'Enter search query';
  cveResults: CveResult[] = [];
  cpeResults: CpeResult[] = [];
  pagedCveResults: CveResult[] = [];
  pagedCpeResults: CpeResult[] = [];
  cveDisplayedColumns: string[] = ['cveId', 'description', 'cvssVersion', 'severity', 'cvssScore'];
  cpeDisplayedColumns: string[] = ['cpeName'];
  pageIndex = 0;
  pageSize = 5;
  pageSizes: number[] = [5, 10, 25, 50, 100];
  cveTotalPages = 0;
  cpeTotalPages = 0;
  cveTotalRecords: number[] = [];
  cpeTotalRecords: number[] = [];
  start = 0;
  end = 0;
  recordIndex = 1;
  private cpePattern = /^cpe:2\.3:[aho](:[^:]*){0,10}$/;
  private strictCpePattern = /^cpe:2\.3:[aho](:[^:]*){10}$/;
  private cveIdPattern = /^CVE-\d{4}-\d{4,}$/;
  private destroy$ = new Subject<void>();

  constructor(
    private http: HttpClient,
    private snackBar: MatSnackBar,
    private dialog: MatDialog,
    private toastService: ToastService,
  ) {}

  ngOnInit(): void {}

  getSearchVariants(): string[] {
    return this.searchType === 'cve'
      ? ['Select Variant', 'Keyword', 'CVE-ID', 'CPE Name Search']
      : ['Select Variant', 'Keyword', 'CPE Name'];
  }

  onSearchTypeChange(): void {
    this.searchVariant = 'Select Variant';
    this.updatePlaceholderAndQuery();
    this.clearResults();
  }

  onSearchVariantChange(): void {
    this.updatePlaceholderAndQuery();
    this.clearResults();
  }

  updatePlaceholderAndQuery(): void {
    this.searchQuery = '';
    if (this.searchVariant === 'CVE-ID') {
      this.searchQuery = 'CVE-';
      this.placeholder = 'Enter CVE-ID (e.g., CVE-1234-1234)';
    } else if (this.searchVariant === 'CPE Name' || this.searchVariant === 'CPE Name Search') {
      this.placeholder = 'Enter the valid CPE name (e.g., cpe:2.3:a:microsoft:edge:138.0.3351.77:*:*:*:*:*:*:*)';
    } else if (this.searchVariant === 'Keyword') {
      this.placeholder = 'Enter the keyword';
    } else {
      this.placeholder = 'Enter search query';
    }
  }

  clearResults(): void {
    this.cveResults = [];
    this.cpeResults = [];
    this.pagedCveResults = [];
    this.pagedCpeResults = [];
    this.pageIndex = 0;
    this.recordIndex = 1;
    this.cveTotalPages = 0;
    this.cpeTotalPages = 0;
    this.cveTotalRecords = [];
    this.cpeTotalRecords = [];
  }

  validateInput(): boolean {
    if (!this.searchQuery.trim() || this.searchVariant === 'Select Variant') {
      this.snackBar.open('Select a valid search variant and enter a query', 'Close', {
        duration: 3000,
        verticalPosition: 'bottom',
        horizontalPosition: 'right'
      });
      return false;
    }

    if (this.searchVariant === 'CPE Name Search' && !this.strictCpePattern.test(this.searchQuery)) {
      this.snackBar.open('Invalid CPE format. Must be a full CPE name (e.g., cpe:2.3:a:vendor:product:version:*:*:*:*:*:*:*)', 'Close', {
        duration: 3000,
        verticalPosition: 'bottom',
        horizontalPosition: 'right'
      });
      return false;
    }

    if (this.searchVariant === 'CPE Name' && !this.cpePattern.test(this.searchQuery)) {
      this.snackBar.open('Invalid CPE format. Must start with cpe:2.3:[a|o|h]', 'Close', {
        duration: 3000,
        verticalPosition: 'bottom',
        horizontalPosition: 'right'
      });
      return false;
    }

    if (this.searchVariant === 'CVE-ID' && !this.cveIdPattern.test(this.searchQuery)) {
      // this.snackBar.open('Invalid CVE-ID format. Must be CVE-YYYY-NNNN', 'Close', {
      //   duration: 3000,
      //   verticalPosition: 'bottom',
      //   horizontalPosition: 'right'
      // });
      this.toastService.showToast('Invalid CVE-ID format. Must be CVE-YYYY-NNNN');
      return false;
    }
  if (this.searchVariant === 'CVE-ID' && this.searchQuery === null || this.searchVariant === 'CVE-ID' && this.searchQuery === null ) {
      // this.snackBar.open('Invalid CVE-ID format. Must be CVE-YYYY-NNNN', 'Close', {
      //   duration: 3000,
      //   verticalPosition: 'bottom',
      //   horizontalPosition: 'right'
      // });
      this.toastService.showToast('Field Cannot be Empty');
      return false;
    }
  

    if (this.searchType === 'cpe' && this.searchVariant === 'Keyword' || this.searchType === 'cve' && this.searchVariant === 'Keyword' ) {
      const words = this.searchQuery.trim();
      console.log("keyword length : ", words.length);
      if (words.length < 3) {
        // this.snackBar.open('Keyword search requires at least 3 letters', 'Close', {
        //   duration: 3000,
        //   verticalPosition: 'bottom',
        //   horizontalPosition: 'right'
        // });
     this.toastService.showToast("Keyword search requires at least 3 letters")
        return false;
      }
    }

    return true;
  }

  search(): void {
    if (!this.validateInput()) {
      return;
    }

    const params: any = {};
    if (this.searchVariant === 'Keyword') {
      params.searchKeyword = this.searchQuery;
    } else if (this.searchVariant === 'CVE-ID') {
      params.searchCveId = this.searchQuery;
    } else if (this.searchVariant === 'CPE Name' || this.searchVariant === 'CPE Name Search') {
      params.searchCpeName = this.searchQuery;
    }

    this.http.get<any>(
      `${environments.searchVulnerabilityUrl}/${this.searchType}`,
      { params }
    ).subscribe({
      next: (data) => {
        console.log("cve search result: ", data)
        if (this.searchType === 'cve') {
          this.cveResults = (data || []).map((item: any) => ({
            cveId: item.cveId,
            cveDescription: item.cveDescription,
            cvssMetrics: item.cvssMetrics
              ? item.cvssMetrics.sort((a: CvssMetric, b: CvssMetric) => parseFloat(b.version) - parseFloat(a.version))
              : [],
            affectedProducts: item.affectedProducts || []
          }));
          this.updateCvePagedData(0);
          this.toastService.showToast("Successfully fetched CVE search result");
        } else {
          console.log("CPE search results : " ,data)
          this.cpeResults = (data || []).map((item: any) => ({
            cpe23Uri: item.cpe23Uri,
            vendor: item.vendor,
            product: item.product,
            version: item.version
          }));
          this.updateCpePagedData(0);
          this.toastService.showToast("Successfully fetched CPE search result");
        }
      },
      error: (error) => {
        console.error(`Error searching ${this.searchType.toUpperCase()}:`, error);
        // this.snackBar.open(`Failed to search ${this.searchType.toUpperCase()}`, 'Close', {
        //   duration: 5000,
        //   verticalPosition: 'bottom',
        //   horizontalPosition: 'right'
        // });
        this.toastService.showToast(`Failed to search ${this.searchType.toUpperCase()}`);
      }
    });
  }

  openCpeVulnerabilities(cpe: CpeResult): void {
    this.http.get<CveResult[]>(
      `${environments.searchVulnerabilityUrl}/cve`,
      { params: { searchCpeName: cpe.cpe23Uri } }
    ).subscribe({
      next: (data) => {
        const vulnerabilities = (data || []).map((item: any) => ({
          cveId: item.cveId,
          cveDescription: item.cveDescription,
          cvssMetrics: item.cvssMetrics
            ? item.cvssMetrics.sort((a: CvssMetric, b: CvssMetric) => parseFloat(b.version) - parseFloat(a.version))
            : [],
          affectedProducts: item.affectedProducts || []
        }));
        this.dialog.open(CpeVulnerabilityDialogComponent, {
          width: '1000px',
          data: {
            cpeName: cpe.cpe23Uri,
            vulnerabilities
          }
        });
      },
      error: (error) => {
        console.error('Error fetching vulnerabilities for CPE:', error);
        // this.snackBar.open('Failed to load vulnerabilities', 'Close', {
        //   duration: 5000,
        //   verticalPosition: 'bottom',
        //   horizontalPosition: 'right'
        // });
        this.toastService.showToast("Failed to load vulnerabilities for CPE")
      }
    });
  }

  updateCvePagedData(initialIndex: number): void {
    const totalItems = this.cveResults.length;
    this.cveTotalPages = Math.ceil(totalItems / this.pageSize);
    this.cveTotalRecords = Array.from({ length: this.cveTotalPages }, (_, i) => i + 1);
    this.start = initialIndex * this.pageSize;
    this.end = this.start + this.pageSize;
    this.pagedCveResults = this.cveResults.slice(this.start, this.end);
  }

  updateCpePagedData(initialIndex: number): void {
    const totalItems = this.cpeResults.length;
    this.cpeTotalPages = Math.ceil(totalItems / this.pageSize);
    this.cpeTotalRecords = Array.from({ length: this.cpeTotalPages }, (_, i) => i + 1);
    this.start = initialIndex * this.pageSize;
    this.end = this.start + this.pageSize;
    this.pagedCpeResults = this.cpeResults.slice(this.start, this.end);
  }

  nextPage(tab: 'cve' | 'cpe'): void {
    if (tab === 'cve' && this.pageIndex < this.cveTotalPages - 1) {
      this.pageIndex++;
      this.recordIndex = this.pageIndex + 1;
      this.updateCvePagedData(this.pageIndex);
    } else if (tab === 'cpe' && this.pageIndex < this.cpeTotalPages - 1) {
      this.pageIndex++;
      this.recordIndex = this.pageIndex + 1;
      this.updateCpePagedData(this.pageIndex);
    }
  }

  previousPage(tab: 'cve' | 'cpe'): void {
    if (this.pageIndex > 0) {
      this.pageIndex--;
      this.recordIndex = this.pageIndex + 1;
      tab === 'cve' ? this.updateCvePagedData(this.pageIndex) : this.updateCpePagedData(this.pageIndex);
    }
  }

  getPage(page: number, tab: 'cve' | 'cpe'): void {
    this.pageIndex = page - 1;
    this.recordIndex = page;
    tab === 'cve' ? this.updateCvePagedData(this.pageIndex) : this.updateCpePagedData(this.pageIndex);
  }

  onPageSizeChange(event: number, tab: 'cve' | 'cpe'): void {
    this.pageSize = event;
    this.pageIndex = 0;
    this.recordIndex = 1;
    tab === 'cve' ? this.updateCvePagedData(this.pageIndex) : this.updateCpePagedData(this.pageIndex);
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }
}