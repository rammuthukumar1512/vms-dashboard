import { Component, OnInit, OnDestroy, Inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatSelectModule } from '@angular/material/select';
import { MatInputModule } from '@angular/material/input';
import { MatButtonModule } from '@angular/material/button';
import { MatTableModule } from '@angular/material/table';
import { MatDialogModule, MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import { MatIconModule } from '@angular/material/icon';
import { FormsModule } from '@angular/forms';
import { HttpClient } from '@angular/common/http';
import { MatSnackBar } from '@angular/material/snack-bar';
import { Subject, takeUntil } from 'rxjs';
import { environments } from '../../environments/environments';
import { ToastService } from '../core/services/toast.service';
import { CveResult, CpeResult, CvssMetric } from '../models/computer.model'; // Add this import
import { CpeVulnerabilityDialogComponent } from './cpe-vulnerability-dialog.component';

@Component({
  selector: 'app-cpe-cve-search',
  standalone: true,
  imports: [
    CommonModule,
    MatFormFieldModule,
    MatSelectModule,
    MatInputModule,
    MatButtonModule,
    MatTableModule,
    MatDialogModule,
    MatIconModule,
    FormsModule,
  ],
  templateUrl: './cpe-cve-search.component.html',
  styleUrls: ['./cpe-cve-search.component.css']
})
export class CpeCveSearchComponent implements OnInit, OnDestroy {
  searchType: 'cve' | 'cpe' = 'cve';
  searchVariant: string = 'Select Variant';
  searchQuery: string = '';
  placeholder: string = 'Enter search query';
  cveResults: CveResult[] = [];
  cpeResults: CpeResult[] = [];
  pagedCveResults: CveResult[] = [];
  pagedCpeResults: CpeResult[] = [];
  cveDisplayedColumns: string[] = ['cveId', 'description', 'cvssVersion', 'severity', 'cvssScore'];
  cpeDisplayedColumns: string[] = ['cpeName'];
  pageIndex = 0;
  pageSize = 5;
  pageSizes: number[] = [5, 10, 25, 50, 100];
  cveTotalPages = 0;
  cpeTotalPages = 0;
  cveTotalRecords: number[] = [];
  cpeTotalRecords: number[] = [];
  start = 0;
  end = 0;
  recordIndex = 1;
  private cpePattern = /^cpe:2\.3:[aho](:[^:]*){0,10}$/;
  private strictCpePattern = /^cpe:2\.3:[aho](:[^:]*){10}$/;
  private cveIdPattern = /^CVE-\d{4}-\d{4,}$/;
  private destroy$ = new Subject<void>();

  constructor(
    private http: HttpClient,
    private snackBar: MatSnackBar,
    private dialog: MatDialog,
    private toastService: ToastService,
  ) {}

  ngOnInit(): void {}

  getSearchVariants(): string[] {
    return this.searchType === 'cve'
      ? ['Select Variant', 'Keyword', 'CVE-ID', 'CPE Name Search']
      : ['Select Variant', 'Keyword', 'CPE Name'];
  }

  onSearchTypeChange(): void {
    this.searchVariant = 'Select Variant';
    this.updatePlaceholderAndQuery();
    this.clearResults();
    this.toastService.showToast(`Search type set to ${this.searchType.toUpperCase()}`);

  }

  onSearchVariantChange(): void {
    this.updatePlaceholderAndQuery();
    this.clearResults();
    this.toastService.showToast(`Search variant set to ${this.searchVariant}`);

  }

  updatePlaceholderAndQuery(): void {
    this.searchQuery = '';
    if (this.searchVariant === 'CVE-ID') {
      this.searchQuery = 'CVE-';
      this.placeholder = 'Enter CVE-ID (e.g., CVE-1234-1234)';
    } else if (this.searchVariant === 'CPE Name' || this.searchVariant === 'CPE Name Search') {
       this.searchQuery = 'cpe:2.3:*:*:*:*:*:*:*:*:*:*:*'
      this.placeholder = 'Enter the valid CPE name (e.g., cpe:2.3:a:microsoft:edge:138.0.3351.77:*:*:*:*:*:*:*)';
    } else if (this.searchVariant === 'Keyword') {
      this.placeholder = 'Enter the keyword';
    } else {
      this.placeholder = 'Enter search query';
    }
  }

  clearResults(): void {
    this.cveResults = [];
    this.cpeResults = [];
    this.pagedCveResults = [];
    this.pagedCpeResults = [];
    this.pageIndex = 0;
    this.recordIndex = 1;
    this.cveTotalPages = 0;
    this.cpeTotalPages = 0;
    this.cveTotalRecords = [];
    this.cpeTotalRecords = [];
    this.toastService.showToast('Search results cleared');

  }

  validateInput(): boolean {
    if (!this.searchQuery.trim() || this.searchVariant === 'Select Variant') {
    this.toastService.showToast('Select a valid search variant and enter a search term.');
      return false;
    }

    if (this.searchVariant === 'CPE Name Search' && !this.strictCpePattern.test(this.searchQuery)) {
      this.toastService.showToast('Invalid CPE format. Must be a full CPE name (e.g., cpe:2.3:a:microsoft:edge:138.0.3351.77:*:*:*:*:*:*:* )')
      return false;
    }

    if (this.searchVariant === 'CPE Name' && !this.cpePattern.test(this.searchQuery)) {
      this.toastService.showToast('Invalid CPE format. Must start with cpe:2.3:[a|o|h]')
      return false;
    }

    if (this.searchVariant === 'CVE-ID' && !this.cveIdPattern.test(this.searchQuery)) {
      this.toastService.showToast('Invalid CVE-ID format. Must be CVE-YYYY-NNNN');
      return false;
    }
  const query = this.searchQuery?.trim();

if (!query) {
  this.toastService.showToast('Field cannot be empty.');
  return false;
}


    if (this.searchType === 'cpe' && this.searchVariant === 'Keyword' || this.searchType === 'cve' && this.searchVariant === 'Keyword' ) {
      const words = this.searchQuery.trim();
      console.log("keyword length : ", words.length);
      if (words.length < 3) {
     this.toastService.showToast("Keyword search requires at least 3 letters")
        return false;
      }
    }

    return true;
  }

  search(): void {
    this.toastService.showToast('Searching for results...');

    if (!this.validateInput()) {
      return;
    }

    const params: any = {};
    if (this.searchVariant === 'Keyword') {
      params.searchKeyword = this.searchQuery;
    } else if (this.searchVariant === 'CVE-ID') {
      params.searchCveId = this.searchQuery;
    } else if (this.searchVariant === 'CPE Name' || this.searchVariant === 'CPE Name Search') {
      params.searchCpeName = this.searchQuery;
    }

    this.http.get<any>(
      `${environments.searchVulnerabilityUrl}/${this.searchType}`,
      { params }
    ).subscribe({
      next: (data) => {
        console.log("cve search result: ", data)
        if (this.searchType === 'cve') {
          this.cveResults = (data || []).map((item: any) => ({
            cveId: item.cveId,
            cveDescription: item.cveDescription,
            cvssMetrics: item.cvssMetrics
              ? item.cvssMetrics.sort((a: CvssMetric, b: CvssMetric) => parseFloat(b.version) - parseFloat(a.version))
              : [],
            affectedProducts: item.affectedProducts || []
          }));
          this.updateCvePagedData(0);
          this.toastService.showToast("Successfully fetched CVE search result");
        } else {
          console.log("CPE search results : " ,data)
          this.cpeResults = (data || []).map((item: any) => ({
            cpe23Uri: item.cpe23Uri,
            vendor: item.vendor,
            product: item.product,
            version: item.version
          }));
          this.updateCpePagedData(0);
          this.toastService.showToast("Successfully fetched CPE search result");
        }
      },
      error: (error) => {
        console.error(`Error searching ${this.searchType.toUpperCase()}:`, error);
        this.toastService.showToast(`Failed to search ${this.searchType.toUpperCase()} data.`);
      }
    });
  }

  openCpeVulnerabilities(cpe: CpeResult): void {
    this.http.get<CveResult[]>(
      `${environments.searchVulnerabilityUrl}/cve`,
      { params: { searchCpeName: cpe.cpe23Uri } }
    ).subscribe({
      next: (data) => {
        this.toastService.showToast('Loading vulnerabilities for selected CPE...');
        const vulnerabilities = (data || []).map((item: any) => ({
          cveId: item.cveId,
          cveDescription: item.cveDescription,
          cvssMetrics: item.cvssMetrics
            ? item.cvssMetrics.sort((a: CvssMetric, b: CvssMetric) => parseFloat(b.version) - parseFloat(a.version))
            : [],
          affectedProducts: item.affectedProducts || []
        }));
        this.dialog.open(CpeVulnerabilityDialogComponent, {
          width: '1000px',
          data: {
            cpeName: cpe.cpe23Uri,
            vulnerabilities
          }
        });
      },
      error: (error) => {
        console.error('Error fetching vulnerabilities for CPE:', error);
        this.toastService.showToast('Unable to retrieve CPE vulnerability data.')
      }
    });
  }

  updateCvePagedData(initialIndex: number): void {
    const totalItems = this.cveResults.length;
    this.cveTotalPages = Math.ceil(totalItems / this.pageSize);
    this.cveTotalRecords = Array.from({ length: this.cveTotalPages }, (_, i) => i + 1);
    this.start = initialIndex * this.pageSize;
    this.end = this.start + this.pageSize;
    this.pagedCveResults = this.cveResults.slice(this.start, this.end);
  }

  updateCpePagedData(initialIndex: number): void {
    const totalItems = this.cpeResults.length;
    this.cpeTotalPages = Math.ceil(totalItems / this.pageSize);
    this.cpeTotalRecords = Array.from({ length: this.cpeTotalPages }, (_, i) => i + 1);
    this.start = initialIndex * this.pageSize;
    this.end = this.start + this.pageSize;
    this.pagedCpeResults = this.cpeResults.slice(this.start, this.end);
  }

  nextPage(tab: 'cve' | 'cpe'): void {
    if (tab === 'cve' && this.pageIndex < this.cveTotalPages - 1) {
      this.pageIndex++;
      this.recordIndex = this.pageIndex + 1;
      this.updateCvePagedData(this.pageIndex);
    } else if (tab === 'cpe' && this.pageIndex < this.cpeTotalPages - 1) {
      this.pageIndex++;
      this.recordIndex = this.pageIndex + 1;
      this.updateCpePagedData(this.pageIndex);
    }
  }

  previousPage(tab: 'cve' | 'cpe'): void {
    if (this.pageIndex > 0) {
      this.pageIndex--;
      this.recordIndex = this.pageIndex + 1;
      tab === 'cve' ? this.updateCvePagedData(this.pageIndex) : this.updateCpePagedData(this.pageIndex);
    }
  }

  getPage(page: number, tab: 'cve' | 'cpe'): void {
    this.pageIndex = page - 1;
    this.recordIndex = page;
    tab === 'cve' ? this.updateCvePagedData(this.pageIndex) : this.updateCpePagedData(this.pageIndex);
  }

  onPageSizeChange(event: number, tab: 'cve' | 'cpe'): void {
    this.pageSize = event;
    this.pageIndex = 0;
    this.recordIndex = 1;
    tab === 'cve' ? this.updateCvePagedData(this.pageIndex) : this.updateCpePagedData(this.pageIndex);
      this.toastService.showToast(`Page size set to ${event}.`);

  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }
}