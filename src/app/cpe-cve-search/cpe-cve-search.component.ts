import { Component, OnInit, OnDestroy, Inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatSelectModule } from '@angular/material/select';
import { MatInputModule } from '@angular/material/input';
import { MatButtonModule } from '@angular/material/button';
import { MatTableModule } from '@angular/material/table';
import { MatDialogModule, MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import { MatIconModule } from '@angular/material/icon';
import { FormsModule } from '@angular/forms';
import { HttpClient } from '@angular/common/http';
import { Subject, takeUntil } from 'rxjs';
import { ApiEndPoints } from '../../environments/api-endpoints';
import { ToastService } from '../core/services/toast.service';
import { CveResult, CpeResult, CvssMetric } from '../models/computer.model';
import { CpeVulnerabilityDialogComponent } from './cpe-vulnerability-dialog.component';
import { MatTooltipModule } from '@angular/material/tooltip';

@Component({
  selector: 'app-cpe-cve-search',
  standalone: true,
  imports: [
    CommonModule,
    MatFormFieldModule,
    MatSelectModule,
    MatInputModule,
    MatButtonModule,
    MatTableModule,
    MatDialogModule,
    MatIconModule,
    FormsModule,
    MatTooltipModule
],
  templateUrl: './cpe-cve-search.component.html',
  styleUrls: ['./cpe-cve-search.component.css']
})
export class CpeCveSearchComponent implements OnInit, OnDestroy {
  searchType: 'cve' | 'cpe' = 'cve';
  searchVariant: string = 'Select Variant';
  searchQuery: string = '';
  placeholder: string = 'Enter search query';
  cveResults: CveResult[] = [];
  cpeResults: CpeResult[] = [];
  searchPerformed: boolean = false;
  pagedCveResults: CveResult[] = [];
  pagedCpeResults: CpeResult[] = [];
  cveDisplayedColumns: string[] = ['cveId', 'description', 'cvssVersion', 'severity', 'cvssScore'];
  cpeDisplayedColumns: string[] = ['cpeName'];
  pageIndex = 0;
  pageSize = 5;
  pageSizes: number[] = [5, 10, 25, 50, 100];
  cveTotalPages = 0;
  cpeTotalPages = 0;
  cveTotalRecords: number[] = [];
  cpeTotalRecords: number[] = [];
  start = 0;
  end = 0;
  recordIndex = 1;
  sortState: number = 0;
  private cpePattern = /^cpe:2\.3:[aho](:[^:]*){0,10}$/;
  private strictCpePattern = /^cpe:2.3:[aho]:(?!\*)([^:\s]+):(?!\*)([^:\s]+):(?!\*)([^:\s]+):([^:\s]+):([^:\s]+):([^:\s]+):([^:\s]+):([^:\s]+):([^:\s]+):([^:\s]+)$/;
  private cveIdPattern = /^CVE-\d{4}-\d{4,}$/;
  private destroy$ = new Subject<void>();

  // CHANGED: Added variables for parted inputs
  cveIdPart: string = '';
  cpePart: string = 'a';
  cpeVendor: string = '';
  cpeProduct: string = '';
  cpeVersion: string = '';

  isEditingCpe: boolean = true;
  constructedCpe: string = '';

  constructor(
    private http: HttpClient,
    private dialog: MatDialog,
    private toastService: ToastService,
  ) {}

  ngOnInit(): void {}

  // CHANGED: Added method to check if variant needs parted UI
  isPartedVariant(): boolean {
    return this.searchVariant === 'CVE-ID' || this.searchVariant === 'CPE Name'; // || this.searchVariant === 'Likely CPE Name';
  }

  getSearchVariants(): string[] {
    return this.searchType === 'cve'
      ? ['Select Variant', 'Keyword', 'CVE-ID', 'CPE Name']
      : ['Select Variant', 'Keyword', 'Likely CPE Name'];
  }

  onSearchTypeChange(): void {
    this.searchVariant = 'Select Variant';
    this.updatePlaceholderAndQuery();
    this.clearResults();
  }

  onSearchVariantChange(): void {
    this.updatePlaceholderAndQuery();
    this.clearResults();
  }

  updatePlaceholderAndQuery(): void {
    this.searchQuery = '';
    // CHANGED: Reset parted variables and set placeholders for new variants
    if (this.searchVariant === 'CVE-ID') {
      this.cveIdPart = '';
      this.placeholder = 'Enter YYYY-NNNN (e.g., 2024-1234)';
    } else if (this.searchVariant === 'CPE Name') {
      this.cpePart = 'a';
      this.cpeVendor = '';
      this.cpeProduct = '';
      this.cpeVersion = '';
      this.placeholder = 'Enter CPE components (e.g., microsoft:edge:138.0.3351.77)';
    } else if (this.searchVariant === 'Keyword') {
      this.placeholder = 'Enter the keyword';
    } else if (this.searchVariant === 'Likely CPE Name') {
      this.searchQuery = 'cpe:2.3:';
      this.placeholder = 'Enter likely CPE name (e.g., cpe:2.3:a:microsoft:edge:138.0.3351.77:*:*:*:*:*:*:*)';
    } else { 
      this.placeholder = 'Enter search query';
    }
  }

  clearResults(): void {
    this.cveResults = [];
    this.cpeResults = [];
    this.pagedCveResults = [];
    this.pagedCpeResults = [];
    this.pageIndex = 0;
    this.recordIndex = 1;
    this.cveTotalPages = 0;
    this.cpeTotalPages = 0;
    this.cveTotalRecords = [];
    this.cpeTotalRecords = [];
    this.searchPerformed = false;
    // CHANGED: Reset parted variables
    this.cveIdPart = '';
    this.cpePart = 'a';
    this.cpeVendor = '';
    this.cpeProduct = '';
    this.cpeVersion = '';
     this.isEditingCpe = true;
    this.constructedCpe = '';
  }

  // CHANGED: Updated to handle parted variants, construct queries, validate individually with toasts
  validateInput(): boolean {
    if (this.searchVariant === 'Select Variant') {
      this.toastService.showErrorToast('Please select a valid search variant before searching.');
      return false;
    }

    let query: string = '';

    switch (this.searchVariant) {
      case 'Keyword':
        query = this.searchQuery?.trim() || '';
        if (!query) {
          this.toastService.showErrorToast('Search term cannot be empty. Please enter a valid keyword.');
          return false;
        }
        if (query.length < 3) {
          this.toastService.showErrorToast('Keyword search requires at least 3 characters. Please enter a longer keyword.');
          return false;
        }
        break;
      case 'CVE-ID':
        query = this.cveIdPart?.trim() || '';
        if (!query) {
          this.toastService.showErrorToast('CVE-ID cannot be empty. Please enter YYYY-NNNN.');
          return false;
        }
        if (!/^\d{4}-\d{4}$/.test(query)) {
          this.toastService.showErrorToast('Invalid CVE-ID format. It must be exactly YYYY-NNNN with numbers only and not exceed 9 characters including the "-".');
          return false;
        }
        break;
      case 'CPE Name':
        if (!this.cpePart || !this.cpeVendor.trim() || !this.cpeProduct.trim() || !this.cpeVersion.trim()) {
          this.toastService.showErrorToast('All CPE fields (part, vendor, product, version) must be filled. Please complete all fields.');
          return false;
        }
        query = `cpe:2.3:${this.cpePart}:${this.cpeVendor}:${this.cpeProduct}:${this.cpeVersion}:*:*:*:*:*:*:*`;
        if (!this.strictCpePattern.test(query)) {
          this.toastService.showErrorToast('Invalid CPE Name format. Vendor, product, and version must not start with "*", contain no colons or spaces, and be non-empty.');
          return false;
        }
        break;
      case 'Likely CPE Name':
        query = this.searchQuery?.trim() || '';
        if (!query) {
          this.toastService.showErrorToast('Likely CPE Name cannot be empty. Please enter a valid format.');
          return false;
        }
        if (!this.cpePattern.test(query)) {
          this.toastService.showErrorToast('Invalid Likely CPE format. It must start with cpe:2.3:[a|h|o] and follow the correct structure.');
          return false;
        }
        break;
    }

    return true;
  }

  search(): void {
    this.pageIndex = 0;
    this.recordIndex = 1;
    this.pageSize = 5;
    this.sortState = 0;

    if (!this.validateInput()) {
      return;
    }

    const params: any = {};
    // CHANGED: Construct params using parted variables for CVE-ID and CPE Name
    if (this.searchVariant === 'Keyword') {
      params.searchKeyword = this.searchQuery;
    } else if (this.searchVariant === 'CVE-ID') {
      params.searchCveId = `CVE-${this.cveIdPart}`;
    } else if (this.searchVariant === 'CPE Name' || this.searchVariant === 'Likely CPE Name') {
      params.searchCpeName = this.searchVariant === 'CPE Name' 
        ? `cpe:2.3:${this.cpePart}:${this.cpeVendor}:${this.cpeProduct}:${this.cpeVersion}:*:*:*:*:*:*:*` 
        : this.searchQuery;
    }

    this.http.get<any>(
      `${ApiEndPoints.searchVulnerabilityUrl}/${this.searchType}`,
      { params }
    ).subscribe({
      next: (data) => {
        if (this.searchType === 'cve') {
          this.cveResults = (data || []).map((item: any) => ({
            cveId: item.cveId,
            cveDescription: item.cveDescription,
            cvssMetrics: item.cvssMetrics
              ? item.cvssMetrics.sort((a: CvssMetric, b: CvssMetric) => parseFloat(b.version) - parseFloat(a.version))
              : [],
            affectedProducts: item.affectedProducts || []
          }));
          this.updateCvePagedData(0);
          this.searchPerformed = true;
          this.toastService.showSuccessToast("Search Completed Successfully");
        } else {
          this.cpeResults = (data || []).map((item: any) => ({
            cpe23Uri: item.cpe23Uri,
            vendor: item.vendor,
            product: item.product,
            version: item.version
          }));
          this.updateCpePagedData(0);
          this.searchPerformed = true;
          this.toastService.showSuccessToast("Search Completed Successfully");
        }
          if (this.searchVariant === 'CPE Name') {
          this.constructedCpe = `cpe:2.3:${this.cpePart}:${this.cpeVendor}:${this.cpeProduct}:${this.cpeVersion}:*:*:*:*:*:*:*`;
          this.isEditingCpe = false;
        }
      },
      error: (error) => {
        console.error(`Error searching ${this.searchType.toUpperCase()}:`, error);
        this.toastService.showErrorToast(`Failed to search ${this.searchType.toUpperCase()} data.`);
        if (this.searchType === 'cve') {
          this.cveResults = [];
          this.pagedCveResults = [];
          this.cveTotalPages = 0;
          this.cveTotalRecords = [];
        } else {
          this.cpeResults = [];
          this.pagedCpeResults = [];
          this.cpeTotalPages = 0;
          this.cpeTotalRecords = [];
        }
        this.searchPerformed = false;
      }
    });
  }

    editCpe(): void {
    this.isEditingCpe = true;
  }

  openCpeVulnerabilities(cpe: CpeResult): void {
    this.http.get<CveResult[]>(
      `${ApiEndPoints.searchVulnerabilityUrl}/cve`,
      { params: { searchCpeName: cpe.cpe23Uri } }
    ).subscribe({
      next: (data) => {
        this.toastService.showSuccessToast('Loading vulnerabilities for selected CPE...');
        const vulnerabilities = (data || []).map((item: any) => ({
          cveId: item.cveId,
          cveDescription: item.cveDescription,
          cvssMetrics: item.cvssMetrics
            ? item.cvssMetrics.sort((a: CvssMetric, b: CvssMetric) => parseFloat(b.version) - parseFloat(a.version))
            : [],
          affectedProducts: item.affectedProducts || []
        }));
        this.dialog.open(CpeVulnerabilityDialogComponent, {
          width: '1000px',
          data: {
            cpeName: cpe.cpe23Uri,
            vulnerabilities
          }
        });
      },
      error: (error) => {
        console.error('Error fetching vulnerabilities for CPE:', error);
        this.toastService.showErrorToast('Unable to retrieve CPE vulnerability data.');
      }
    });
  }

  updateCvePagedData(initialIndex: number): void {
    if (!this.pageSizes.includes(this.pageSize)) {
      this.pageSize = this.pageSizes[0] || 5;
    }

    const totalItems = this.cveResults.length;

    this.pageSizes = totalItems >= 100 ? [5, 10, 25, 50, 100] :
                    totalItems >= 50  ? [5, 10, 25, 50] :
                    totalItems >= 25  ? [5, 10, 25] :
                    totalItems >= 10  ? [5, 10] :
                    totalItems > 0    ? [5] : [];

    let sortedResults = [...this.cveResults];
    if (this.sortState === 1) {
      sortedResults.sort((a, b) => (a.cvssMetrics[0]?.baseScore ?? 0) - (b.cvssMetrics[0]?.baseScore ?? 0));
    } else if (this.sortState === 2) {
      sortedResults.sort((a, b) => (b.cvssMetrics[0]?.baseScore ?? 0) - (a.cvssMetrics[0]?.baseScore ?? 0));
    }
    this.cveTotalPages = Math.ceil(totalItems / this.pageSize);
    this.cveTotalRecords = Array.from({ length: this.cveTotalPages }, (_, i) => i + 1);
    this.start = initialIndex * this.pageSize;
    this.end = this.start + this.pageSize;
    this.pagedCveResults = sortedResults.slice(this.start, this.end);
  }

  updateCpePagedData(initialIndex: number): void {
    if (!this.pageSizes.includes(this.pageSize)) {
      this.pageSize = this.pageSizes[0] || 5;
    }

    const totalItems = this.cpeResults.length;

    this.pageSizes = totalItems >= 100 ? [5, 10, 25, 50, 100] :
                    totalItems >= 50  ? [5, 10, 25, 50] :
                    totalItems >= 25  ? [5, 10, 25] :
                    totalItems >= 10  ? [5, 10] :
                    totalItems > 0    ? [5] : [];

    this.cpeTotalPages = Math.ceil(totalItems / this.pageSize);
    this.cpeTotalRecords = Array.from({ length: this.cpeTotalPages }, (_, i) => i + 1);
    this.start = initialIndex * this.pageSize;
    this.end = this.start + this.pageSize;
    this.pagedCpeResults = this.cpeResults.slice(this.start, this.end);
  }

  toggleCvssSort(): void {
    if (this.searchType !== 'cve' || !this.searchPerformed || this.pagedCveResults.length === 0) return;
    this.sortState = (this.sortState + 1) % 3;
    this.updateCvePagedData(this.pageIndex);
  }

  nextPage(tab: 'cve' | 'cpe'): void {
    if (tab === 'cve' && this.pageIndex < this.cveTotalPages - 1) {
      this.pageIndex++;
      this.recordIndex = this.pageIndex + 1;
      this.updateCvePagedData(this.pageIndex);
    } else if (tab === 'cpe' && this.pageIndex < this.cpeTotalPages - 1) {
      this.pageIndex++;
      this.recordIndex = this.pageIndex + 1;
      this.updateCpePagedData(this.pageIndex);
    }
  }

  previousPage(tab: 'cve' | 'cpe'): void {
    if (this.pageIndex > 0) {
      this.pageIndex--;
      this.recordIndex = this.pageIndex + 1;
      tab === 'cve' ? this.updateCvePagedData(this.pageIndex) : this.updateCpePagedData(this.pageIndex);
    }
  }

  getPage(page: number, tab: 'cve' | 'cpe'): void {
    this.pageIndex = page - 1;
    this.recordIndex = page;
    tab === 'cve' ? this.updateCvePagedData(this.pageIndex) : this.updateCpePagedData(this.pageIndex);
  }

  onScroll(event: Event): void {
    const element = event.target as HTMLElement;
    if (element.scrollHeight - element.scrollTop === element.clientHeight) {
      element.classList.add('scrolled-to-end');
    } else {
      element.classList.remove('scrolled-to-end');
    }
  }

  onPageSizeChange(event: number, tab: 'cve' | 'cpe'): void {
    this.pageSize = event;
    this.pageIndex = 0;
    this.recordIndex = 1;
    tab === 'cve' ? this.updateCvePagedData(this.pageIndex) : this.updateCpePagedData(this.pageIndex);
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }
}