import { CommonModule } from "@angular/common";
import { MAT_DIALOG_DATA, MatDialog, MatDialogModule, MatDialogRef } from "@angular/material/dialog";
import { MatButtonModule } from "@angular/material/button";
import { MatTableModule } from "@angular/material/table";
import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, Inject, OnInit, QueryList, ViewChildren } from "@angular/core";
import { CveResult } from "../models/computer.model";
import { MatTooltip } from "@angular/material/tooltip";
import { AppRoutes } from "../../environments/approutes";
import { Router } from '@angular/router';
import { VulnerabilityService } from '../core/services/vulnerabilityService'; // Add this import
import { ApplicationResolveService } from "../core/services/application-resolve.service";

@Component({
  selector: 'app-cpe-vulnerability-dialog',
  templateUrl: './cpe-vulnerability-dialog.component.html',
  styleUrls: ['./cpe-vulnerability-dialog.component.css'],
  standalone: true,
  imports: [CommonModule, MatDialogModule, MatButtonModule, MatTableModule, MatTooltip]
})
export class CpeVulnerabilityDialogComponent implements OnInit, AfterViewInit {
  displayedColumns: string[] = ['cveId', 'description', 'severity', 'cvssScore'];
  originalVulnerabilities: CveResult[] = [];
  sortState: number = 0;
  cveIdSortState: number = 0; // For CVE ID sorting
  selectedCveId: string | null = null;
  @ViewChildren('vulnerabilityTableRow', { read: ElementRef }) vulnerabilityTableRows!: QueryList<ElementRef>;

  constructor(
    public dialogRef: MatDialogRef<CpeVulnerabilityDialogComponent>,
    private router: Router,
    private applicationResolveService: ApplicationResolveService,
    private cdRef: ChangeDetectorRef,
    private vulnerabilityService: VulnerabilityService, // Inject VulnerabilityService
    @Inject(MAT_DIALOG_DATA) public data: { cpeName: string; vulnerabilities: CveResult[] }
  ) {
  }
ngOnInit() {
    this.originalVulnerabilities = [...this.data.vulnerabilities];
    const state = this.vulnerabilityService.getCveCpeSearchState();
    if (state && state.fromDialog) {
      this.sortState = state.sortStateInDialog;
      this.cveIdSortState = state.cveIdSortStateInDialog || 0; 
      this.selectedCveId = state.selectedCveIdInDialog;
      this.sortVulnerabilities();
    }
  }
ngAfterViewInit(): void {
    if (this.selectedCveId) {
      setTimeout(() => {
        const highlightedRow = document.querySelector(`tr.highlight`);
        const selectedRowIndex = this.vulnerabilityService.getVulnerabilityIndexForCveCpe();
       if (this.vulnerabilityTableRows && this.vulnerabilityTableRows.length > 0) {
        const selectedRow = this.vulnerabilityTableRows.toArray()[selectedRowIndex]?.nativeElement;
        selectedRow?.scrollIntoView({ behaviour: 'smooth', block: 'center'});
    } 
      }, 100);
    }
  }

  toggleSort() {
    this.selectedCveId = null;
    this.sortState = (this.sortState + 1) % 3;
    this.cveIdSortState = 0; // Reset CVE ID sort when sorting by CVSS
    this.sortVulnerabilities();
  }
toggleCveIdSort(): void {
    this.selectedCveId = null;
    this.cveIdSortState = (this.cveIdSortState + 1) % 3;
    this.sortState = 0; // Reset CVSS sort when sorting by CVE ID
    this.sortVulnerabilities();
  }

  public showVulnerabilityMetrics(cveId: string, index: number) {
  this.vulnerabilityService.setVulnerabilityIndexForCveCpe(index);  
  const currentState = this.vulnerabilityService.getCveCpeSearchState() || {};
  this.applicationResolveService.setPreviousUrl(this.router.url);
  const state = {
    searchType: 'cpe',
    searchVariant: currentState.searchVariant || 'Select Variant',
    searchQuery: currentState.searchQuery || '',
    cveIdPart: '',
    cpePart: currentState.cpePart || 'a',
    cpeVendor: currentState.cpeVendor || '',
    cpeProduct: currentState.cpeProduct || '',
    cpeVersion: currentState.cpeVersion || '',
    isEditingCpe: currentState.isEditingCpe || false,
    constructedCpe: currentState.constructedCpe || '',
    searchPerformed: true,
    pageIndex: currentState.pageIndex || 0,
    pageSize: currentState.pageSize || 5,
    recordIndex: currentState.recordIndex || 1,
    sortState: currentState.sortState || 0,
    selectedCveId: null,
    selectedCpeName: this.data.cpeName,
    fromDialog: true,
    cveResults: [],
    cpeResults: this.vulnerabilityService.getLastShowedCpeResult() || [],
    selectedCpe: { cpe23Uri: this.data.cpeName },
    vulnerabilities: this.data.vulnerabilities,
    sortStateInDialog: this.sortState,
    selectedCveIdInDialog: cveId
  };
   this.vulnerabilityService.setCveCpeSearchState(state);
  this.dialogRef.close();
  this.cdRef.detectChanges();
  this.router.navigate([`${AppRoutes.vulnerability_metrics}/cve/${cveId}`]);
}

  private sortVulnerabilities() {
    if (this.cveIdSortState !== 0) {
      this.data.vulnerabilities = [...this.data.vulnerabilities].sort((a, b) => {
        if (this.cveIdSortState === 1) {
          return a.cveId.localeCompare(b.cveId); 
        } else {
          return b.cveId.localeCompare(a.cveId); 
        }
      });
    } else if (this.sortState === 0) {
      this.data.vulnerabilities = [...this.originalVulnerabilities];
    } else if (this.sortState === 1) {
      this.data.vulnerabilities = [...this.data.vulnerabilities].sort(
        (a, b) => (a.cvssMetrics[0]?.baseScore || 0) - (b.cvssMetrics[0]?.baseScore || 0)
      );
    } else {
      this.data.vulnerabilities = [...this.data.vulnerabilities].sort(
        (a, b) => (b.cvssMetrics[0]?.baseScore || 0) - (a.cvssMetrics[0]?.baseScore || 0)
      );
    }
  }
}
