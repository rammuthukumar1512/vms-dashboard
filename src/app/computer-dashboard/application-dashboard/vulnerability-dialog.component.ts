// import { Component, Inject } from '@angular/core';
// import { CommonModule } from '@angular/common';
// import { MatDialogModule, MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';
// import { MatButtonModule } from '@angular/material/button';
// import { MatTableModule } from '@angular/material/table';
// import { MatCardModule } from '@angular/material/card';
// import { FormsModule } from '@angular/forms';
// import { Vulnerability } from '../../models/computer.model';
// import { MatDialog } from '@angular/material/dialog';
// import { LikelyCpeDialogComponent } from './likely-cpe-dialog.component';
// import { environments } from '../../../environments/environments';

// @Component({
//   selector: 'app-vulnerability-dialog',
//   standalone: true,
//   imports: [CommonModule, MatDialogModule, MatButtonModule, MatTableModule, MatCardModule, FormsModule],
//   templateUrl: './vulnerability-dialog.component.html',
//   styleUrls: ['./vulnerability-dialog.component.css']
// })
// export class VulnerabilityDialogComponent {
//   vulnDisplayedColumns: string[] = ['cveId', 'description', 'severity', 'cvssScore'];
//   filteredVulnerabilities: Vulnerability[] = [];
//   isResolved: boolean = false;

//   constructor(
//     public dialogRef: MatDialogRef<VulnerabilityDialogComponent>,
//     @Inject(MAT_DIALOG_DATA) public data: {
//       softwareName: string;
//       vulnerabilities: Vulnerability[];
//       severityCounts: { critical: number; high: number; medium: number; low: number };
//       cpeName: string | null;
//       resolved: boolean;
//       uuid: string;
//       softwareVersion: string;
//       vendor: string;
//     },
//     private dialog: MatDialog
//   ) {
//     this.filteredVulnerabilities = this.data.vulnerabilities;
//     this.isResolved = this.data.resolved; // Track initial resolved state
//   }

//   filterVulnerabilities(severity: 'Critical' | 'High' | 'Medium' | 'Low' | null): void {
//     this.filteredVulnerabilities = !severity
//       ? this.data.vulnerabilities
//       : this.data.vulnerabilities.filter(vuln => vuln.severity.toLowerCase() === severity.toLowerCase());
//   }

// openLikelyCpeModal(): void {
//   const dialogRef = this.dialog.open(LikelyCpeDialogComponent, {
//     width: '600px',
//     data: {
//       uuid: this.data.uuid,
//       softwareName: this.data.softwareName,
//       softwareVersion: this.data.softwareVersion,
//       vendor: this.data.vendor
//     }
//   });

//   dialogRef.afterClosed().subscribe((result: any) => {
//     if (result && !this.isResolved) {
//       localStorage.setItem('lastResolvedApp', JSON.stringify({
//         softwareName: this.data.softwareName,
//         uuid: this.data.uuid,
//         machineName: this.data.vendor, // Assuming vendor relates to machine, adjust if needed
//         pageIndex: localStorage.getItem('currentPageIndex') || '0',
//         recordIndex: localStorage.getItem('currentRecordIndex') || '1'
//       }));
//       this.data.cpeName = result.cpeName;
//       this.data.resolved = true;
//       this.isResolved = true;
//     }
//   });
// }

// onClose(): void {
//   if (this.isResolved && !this.data.resolved) {
//     this.refreshPage();
//   }
//   this.dialogRef.close();
// }

// refreshPage(): void {
//   // Store current state before refresh
//   const currentState = {
//     machineName: this.data.vendor, // Adjust based on your data model
//     pageIndex: localStorage.getItem('currentPageIndex') || '0',
//     recordIndex: localStorage.getItem('currentRecordIndex') || '1'
//   };
//   localStorage.setItem('currentDashboardState', JSON.stringify(currentState));
//   window.location.reload();
// }
// }

import { Component, Inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatDialogModule, MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';
import { MatButtonModule } from '@angular/material/button';
import { MatTableModule } from '@angular/material/table';
import { MatCardModule } from '@angular/material/card';
import { FormsModule } from '@angular/forms';
import { ComputerDetails, Vulnerability } from '../../models/computer.model';
import { MatDialog } from '@angular/material/dialog';
import { LikelyCpeDialogComponent } from './likely-cpe-dialog.component';
import { environments } from '../../../environments/environments';
import { HttpClient } from '@angular/common/http'; // Add HttpClient

@Component({
  selector: 'app-vulnerability-dialog',
  standalone: true,
  imports: [CommonModule, MatDialogModule, MatButtonModule, MatTableModule, MatCardModule, FormsModule],
  templateUrl: './vulnerability-dialog.component.html',
  styleUrls: ['./vulnerability-dialog.component.css']
})
export class VulnerabilityDialogComponent {
  vulnDisplayedColumns: string[] = ['cveId', 'description', 'severity', 'cvssScore'];
  filteredVulnerabilities: Vulnerability[] = [];
  isResolved: boolean = false;
  lastResolvedApp: { softwareName: string, uuid: string, machineName: string, pageIndex?: string, recordIndex?: string } | null = null;

  constructor(
    public dialogRef: MatDialogRef<VulnerabilityDialogComponent>,
    @Inject(MAT_DIALOG_DATA) public data: {
      softwareName: string;
      vulnerabilities: Vulnerability[];
      severityCounts: { critical: number; high: number; medium: number; low: number };
      cpeName: string | null;
      resolved: boolean;
      uuid: string;
      softwareVersion: string;
      vendor: string;
    },
    private dialog: MatDialog,
    private http: HttpClient // Inject HttpClient
  ) {
    this.filteredVulnerabilities = this.data.vulnerabilities;
    this.isResolved = this.data.resolved;
    // Initialize lastResolvedApp from parent component if needed (e.g., from ApplicationDashboardComponent)
  }

  filterVulnerabilities(severity: 'Critical' | 'High' | 'Medium' | 'Low' | null): void {
    this.filteredVulnerabilities = !severity
      ? this.data.vulnerabilities
      : this.data.vulnerabilities.filter(vuln => vuln.severity.toLowerCase() === severity.toLowerCase());
  }

  openLikelyCpeModal(): void {
    const dialogRef = this.dialog.open(LikelyCpeDialogComponent, {
      width: '600px',
      data: {
        uuid: this.data.uuid,
        softwareName: this.data.softwareName,
        softwareVersion: this.data.softwareVersion,
        vendor: this.data.vendor
      }
    });

    dialogRef.afterClosed().subscribe((result: any) => {
      if (result && !this.isResolved) {
        this.lastResolvedApp = {
          softwareName: this.data.softwareName,
          uuid: this.data.uuid,
          machineName: this.data.vendor // Adjust if machineName is different
        };
        this.data.cpeName = result.cpeName;
        this.data.resolved = true;
        this.isResolved = true;
        this.refreshData(); // Call API to update data
      }
    });
  }

  refreshData(): void {
    this.http.get<ComputerDetails>('http://localhost:8080/api/getDashboardMetrics').subscribe({
      next: (data) => {
        // Update appData via shared service (assuming SharedDataService handles this)
        this.dialogRef.close(); // Close modal after data refresh
        window.location.reload(); // Refresh page to reflect new data
      },
      error: (error) => {
        console.error('Error refreshing dashboard metrics:', error);
      }
    });
  }

  onClose(): void {
    if (this.isResolved && !this.data.resolved) {
      this.refreshData();
    }
    this.dialogRef.close();
  }
}

