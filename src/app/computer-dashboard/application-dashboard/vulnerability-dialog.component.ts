import { AfterViewInit, Component, ElementRef, Inject, OnInit, QueryList, ViewChild, ViewChildren } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatDialogModule, MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';
import { MatButtonModule } from '@angular/material/button';
import { MatTableModule } from '@angular/material/table';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatCardModule } from '@angular/material/card';
import { FormsModule } from '@angular/forms';
import { Vulnerability } from '../../models/computer.model';
import { MatDialog } from '@angular/material/dialog';
import { LikelyCpeDialogComponent } from '../../resolve-applications/likely-cpe-dialog.component';
import { HttpClient } from '@angular/common/http';
import { ApiEndPoints } from '../../../environments/api-endpoints';
import { Router } from '@angular/router'; // Added for navigation
import { ApplicationResolveService } from '../../core/services/application-resolve.service';
import { VulnerabilityService } from '../../core/services/vulnerabilityService';
import { AppRoutes } from '../../../environments/approutes';
import { MatIconModule } from '@angular/material/icon';

@Component({
  selector: 'app-vulnerability-dialog',
  standalone: true,
  imports: [CommonModule, MatDialogModule, MatButtonModule, MatTableModule, MatCardModule, FormsModule,MatTooltipModule,MatIconModule],
  templateUrl: './vulnerability-dialog.component.html',
  styleUrls: ['./vulnerability-dialog.component.css']
})
export class VulnerabilityDialogComponent implements OnInit,AfterViewInit {
  vulnDisplayedColumns: string[] = ['cveId', 'description', 'severity', 'cvssScore'];
  filteredVulnerabilities: Vulnerability[] = [];
  isResolved: boolean = false;
  lastResolvedApp: { softwareName: string, uuid: string, machineName: string, pageIndex?: string, recordIndex?: string } | null = null;
  selectedSeverity: string | null = null;
  previousUrl: string | null = null;
  selectedRowIndex: number | null = null;
 // Sorting states: 0 = none, 1 = ascending, 2 = descending
sortState: number = 0; 
cveIdSortState: number = 0;
cvssSortState: number = 0;
displayedVulnerabilities: Vulnerability[] = []; // final array shown in table


  @ViewChildren('vulnerabilityTableRow', { read: ElementRef }) vulnerabilityTableRows!: QueryList<ElementRef>;
  @ViewChild('vulnerabilityTable', { read: ElementRef }) vulnerabilityTable!: ElementRef;
  constructor(
    public dialogRef: MatDialogRef<VulnerabilityDialogComponent>,
    @Inject(MAT_DIALOG_DATA) public data: {
      softwareName: string;
      vulnerabilities: Vulnerability[];
      severityCounts: { critical: number; high: number; medium: number; low: number };
      cpeName: string | null;
      resolved: boolean;
      uuid: string;
      softwareVersion: string;
      vendor: string;
    },
    private dialog: MatDialog,
    private http: HttpClient,
    private router: Router,// Added for navigation
    private applicationResolveService: ApplicationResolveService ,
     private vulnerabilityService: VulnerabilityService// Added service

  ) {
    this.filteredVulnerabilities = this.data.vulnerabilities;
    this.isResolved = this.data.resolved;
  }

  ngOnInit(): void {
    this.previousUrl = this.applicationResolveService.getPreviousUrl();
    const selectedSeverity = this.vulnerabilityService.getSelectedVulnerabilitySeverity();
    this.filteredVulnerabilities = this.data.vulnerabilities;
    this.displayedVulnerabilities = [...this.filteredVulnerabilities];

    if (this.previousUrl?.match('vulnerability-metrics')) {
      this.filterVulnerabilities(selectedSeverity as 'Critical' | 'High' | 'Medium' | 'Low');
      this.sortState = this.applicationResolveService.getSortState();
      if(this.sortState) {
        this.cveIdSortState = this.applicationResolveService.getCveIdSortState();
        this.cvssSortState = this.applicationResolveService.getCvssSortState();
        this.applySortingAndFiltering();
      }
      this.selectedRowIndex = this.vulnerabilityService.getSelectedVulnerabilityIndex();
    }
  }

  ngAfterViewInit(): void {
    const selectedVulnerabilityIndex = this.vulnerabilityService.getSelectedVulnerabilityIndex();
    if (this.vulnerabilityTableRows && this.vulnerabilityTableRows.length > 0) {
      const selectedRow = this.vulnerabilityTableRows.toArray()[selectedVulnerabilityIndex]?.nativeElement;
      selectedRow?.scrollIntoView({ behaviour: 'smooth', block: 'center'});
    }
  }
filterVulnerabilities(severity: 'Critical' | 'High' | 'Medium' | 'Low' | null): void {
  this.vulnerabilityService.setSelectedVulnerabilitySeverity(severity);
  this.selectedSeverity = severity;
  this.selectedRowIndex = null;

  // Apply severity filter
  this.filteredVulnerabilities = !severity
    ? this.data.vulnerabilities
    : this.data.vulnerabilities.filter(
        vuln => vuln.severity.toLowerCase() === severity.toLowerCase()
      );

  // Reset both sorts when severity changes
  this.cveIdSortState = 0;
  this.cvssSortState = 0;

  // Update displayed list
  this.displayedVulnerabilities = [...this.filteredVulnerabilities];

  // Blink animation
  if (this.vulnerabilityTable) {
    const table = this.vulnerabilityTable.nativeElement;
    table.classList.add('table-blink');
    table.setAttribute('aria-live', 'polite');
    table.setAttribute('aria-label', `Filtered by ${severity || 'All'} severity`);
    setTimeout(() => table.classList.remove('table-blink'), 300);
  }
}


  openLikelyCpeModal(): void {
    const dialogRef = this.dialog.open(LikelyCpeDialogComponent, {
      width: '600px',
      data: {
        uuid: this.data.uuid,
        softwareName: this.data.softwareName,
        softwareVersion: this.data.softwareVersion,
        vendor: this.data.vendor
      }
    });

    dialogRef.afterClosed().subscribe((result: any) => {
      if (result && !this.isResolved) {
        this.lastResolvedApp = {
          softwareName: this.data.softwareName,
          uuid: this.data.uuid,
          machineName: this.data.vendor
        };
        this.data.cpeName = result.cpeName;
        this.data.resolved = true;
        this.isResolved = true;
        this.refreshData();
      }
    });
  }

  refreshData(): void {
    this.http.get(ApiEndPoints.unique_url).subscribe({
      next: () => {
        this.applicationResolveService.setSortState(0);
        this.dialogRef.close();
      },
      error: (error) => {
        console.error('Error refreshing dashboard metrics:', error);
      }
    });
  }
  onClose(): void {
    if (this.isResolved && !this.data.resolved) {
      this.refreshData();
    }
    this.dialogRef.close();
  }
  toggleCvssSort(): void {
  // Cycle sort: 0 -> 1 -> 2 -> 0
  this.cvssSortState = (this.cvssSortState + 1) % 3;
  this.cveIdSortState = 0; // Reset CVE sort when CVSS used
  this.selectedRowIndex = null;
  this.applicationResolveService.setSortState(2);
  this.applicationResolveService.setCvssSortState(this.cvssSortState);
  this.applicationResolveService.setCveIdSortState(this.cveIdSortState);
  this.applySortingAndFiltering();
}

toggleCveIdSort(): void {
  // Cycle sort: 0 -> 1 -> 2 -> 0
  this.cveIdSortState = (this.cveIdSortState + 1) % 3;
  this.cvssSortState = 0; // Reset CVSS sort when CVE sort used
  this.selectedRowIndex = null;
  this.applicationResolveService.setSortState(1);
  this.applicationResolveService.setCveIdSortState(this.cveIdSortState);
  this.applicationResolveService.setCvssSortState(this.cvssSortState);
  this.applySortingAndFiltering();
}

private applySortingAndFiltering(): void {
  let result = [...this.filteredVulnerabilities];

  // Apply CVE ID sort (by year)
  if (this.cveIdSortState === 1) {
    result.sort((a, b) => {
      const yearA = parseInt(a.cveId?.split('-')[1] || '0', 10);
      const yearB = parseInt(b.cveId?.split('-')[1] || '0', 10);
      return yearA - yearB;
    });
  } else if (this.cveIdSortState === 2) {
    result.sort((a, b) => {
      const yearA = parseInt(a.cveId?.split('-')[1] || '0', 10);
      const yearB = parseInt(b.cveId?.split('-')[1] || '0', 10);
      return yearB - yearA;
    });
  }

  // Apply CVSS score sort
  if (this.cvssSortState === 1) {
    result.sort((a, b) => (a.cvssScore || 0) - (b.cvssScore || 0));
  } else if (this.cvssSortState === 2) {
    result.sort((a, b) => (b.cvssScore || 0) - (a.cvssScore || 0));
  }

  // Final displayed data
  this.displayedVulnerabilities = result;
}


  navigateToResolveApplications(): void {
     this.applicationResolveService.setResolveData({
      uuid: this.data.uuid,
      softwareName: this.data.softwareName,
      softwareVersion: this.data.softwareVersion,
      vendorName: this.data.vendor
    });
    this.dialogRef.close(); // Close the dialog
    this.router.navigate(['/resolve-applications']); // Navigate to resolve-applications
  }

  public showVulnerabilityMetrics(cveId: String, index: number) {
     this.vulnerabilityService.setSelectedVulnerabilityIndex(index);
     if(!this.cveIdSortState && !this.cvssSortState) this.applicationResolveService.setSortState(0);
     this.applicationResolveService.setPreviousUrl(this.router.url);
     sessionStorage.setItem('previousUrl', '');
     this.dialogRef.close();
     this.router.navigate([`${AppRoutes.vulnerability_metrics}/cve/${cveId}`], { queryParams:{selectedApp : this.data.uuid}});
  }
}